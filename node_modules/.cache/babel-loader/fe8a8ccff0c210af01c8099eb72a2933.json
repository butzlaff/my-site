{"ast":null,"code":"'use strict';\n\nconst process = require('process');\n\nconst mysql = require('../index.js');\n\nconst EventEmitter = require('events').EventEmitter;\n\nconst PoolConnection = require('./pool_connection.js');\n\nconst Queue = require('denque');\n\nconst Connection = require('./connection.js');\n\nfunction spliceConnection(queue, connection) {\n  const len = queue.length;\n\n  for (let i = 0; i < len; i++) {\n    if (queue.get(i) === connection) {\n      queue.removeOne(i);\n      break;\n    }\n  }\n}\n\nclass Pool extends EventEmitter {\n  constructor(options) {\n    super();\n    this.config = options.config;\n    this.config.connectionConfig.pool = this;\n    this._allConnections = new Queue();\n    this._freeConnections = new Queue();\n    this._connectionQueue = new Queue();\n    this._closed = false;\n  }\n\n  promise(promiseImpl) {\n    const PromisePool = require('../promise').PromisePool;\n\n    return new PromisePool(this, promiseImpl);\n  }\n\n  getConnection(cb) {\n    if (this._closed) {\n      return process.nextTick(() => cb(new Error('Pool is closed.')));\n    }\n\n    let connection;\n\n    if (this._freeConnections.length > 0) {\n      connection = this._freeConnections.shift();\n      this.emit('acquire', connection);\n      return process.nextTick(() => cb(null, connection));\n    }\n\n    if (this.config.connectionLimit === 0 || this._allConnections.length < this.config.connectionLimit) {\n      connection = new PoolConnection(this, {\n        config: this.config.connectionConfig\n      });\n\n      this._allConnections.push(connection);\n\n      return connection.connect(err => {\n        if (this._closed) {\n          return cb(new Error('Pool is closed.'));\n        }\n\n        if (err) {\n          return cb(err);\n        }\n\n        this.emit('connection', connection);\n        this.emit('acquire', connection);\n        return cb(null, connection);\n      });\n    }\n\n    if (!this.config.waitForConnections) {\n      return process.nextTick(() => cb(new Error('No connections available.')));\n    }\n\n    if (this.config.queueLimit && this._connectionQueue.length >= this.config.queueLimit) {\n      return cb(new Error('Queue limit reached.'));\n    }\n\n    this.emit('enqueue');\n    return this._connectionQueue.push(cb);\n  }\n\n  releaseConnection(connection) {\n    let cb;\n\n    if (!connection._pool) {\n      // The connection has been removed from the pool and is no longer good.\n      if (this._connectionQueue.length) {\n        cb = this._connectionQueue.shift();\n        process.nextTick(this.getConnection.bind(this, cb));\n      }\n    } else if (this._connectionQueue.length) {\n      cb = this._connectionQueue.shift();\n      process.nextTick(cb.bind(null, null, connection));\n    } else {\n      this._freeConnections.push(connection);\n\n      this.emit('release', connection);\n    }\n  }\n\n  end(cb) {\n    this._closed = true;\n\n    if (typeof cb !== 'function') {\n      cb = function (err) {\n        if (err) {\n          throw err;\n        }\n      };\n    }\n\n    let calledBack = false;\n    let closedConnections = 0;\n    let connection;\n\n    const endCB = function (err) {\n      if (calledBack) {\n        return;\n      }\n\n      if (err || ++closedConnections >= this._allConnections.length) {\n        calledBack = true;\n        cb(err);\n        return;\n      }\n    }.bind(this);\n\n    if (this._allConnections.length === 0) {\n      endCB();\n      return;\n    }\n\n    for (let i = 0; i < this._allConnections.length; i++) {\n      connection = this._allConnections.get(i);\n\n      connection._realEnd(endCB);\n    }\n  }\n\n  query(sql, values, cb) {\n    const cmdQuery = Connection.createQuery(sql, values, cb, this.config.connectionConfig);\n\n    if (typeof cmdQuery.namedPlaceholders === 'undefined') {\n      cmdQuery.namedPlaceholders = this.config.connectionConfig.namedPlaceholders;\n    }\n\n    this.getConnection((err, conn) => {\n      if (err) {\n        if (typeof cmdQuery.onResult === 'function') {\n          cmdQuery.onResult(err);\n        } else {\n          cmdQuery.emit('error', err);\n        }\n\n        return;\n      }\n\n      try {\n        conn.query(cmdQuery).once('end', () => {\n          conn.release();\n        });\n      } catch (e) {\n        conn.release();\n        throw e;\n      }\n    });\n    return cmdQuery;\n  }\n\n  execute(sql, values, cb) {\n    // TODO construct execute command first here and pass it to connection.execute\n    // so that polymorphic arguments logic is there in one place\n    if (typeof values === 'function') {\n      cb = values;\n      values = [];\n    }\n\n    this.getConnection((err, conn) => {\n      if (err) {\n        return cb(err);\n      }\n\n      try {\n        conn.execute(sql, values, cb).once('end', () => {\n          conn.release();\n        });\n      } catch (e) {\n        conn.release();\n        throw e;\n      }\n    });\n  }\n\n  _removeConnection(connection) {\n    // Remove connection from all connections\n    spliceConnection(this._allConnections, connection); // Remove connection from free connections\n\n    spliceConnection(this._freeConnections, connection);\n    this.releaseConnection(connection);\n  }\n\n  format(sql, values) {\n    return mysql.format(sql, values, this.config.connectionConfig.stringifyObjects, this.config.connectionConfig.timezone);\n  }\n\n  escape(value) {\n    return mysql.escape(value, this.config.connectionConfig.stringifyObjects, this.config.connectionConfig.timezone);\n  }\n\n  escapeId(value) {\n    return mysql.escapeId(value, false);\n  }\n\n}\n\nmodule.exports = Pool;","map":{"version":3,"names":["process","require","mysql","EventEmitter","PoolConnection","Queue","Connection","spliceConnection","queue","connection","len","length","i","get","removeOne","Pool","constructor","options","config","connectionConfig","pool","_allConnections","_freeConnections","_connectionQueue","_closed","promise","promiseImpl","PromisePool","getConnection","cb","nextTick","Error","shift","emit","connectionLimit","push","connect","err","waitForConnections","queueLimit","releaseConnection","_pool","bind","end","calledBack","closedConnections","endCB","_realEnd","query","sql","values","cmdQuery","createQuery","namedPlaceholders","conn","onResult","once","release","e","execute","_removeConnection","format","stringifyObjects","timezone","escape","value","escapeId","module","exports"],"sources":["/home/emilio/√Årea de Trabalho/OneBitCode-aulas/REACT/site-react-login-live/react-controlledForms/node_modules/mysql2/lib/pool.js"],"sourcesContent":["'use strict';\n\nconst process = require('process');\nconst mysql = require('../index.js');\n\nconst EventEmitter = require('events').EventEmitter;\nconst PoolConnection = require('./pool_connection.js');\nconst Queue = require('denque');\nconst Connection = require('./connection.js');\n\nfunction spliceConnection(queue, connection) {\n  const len = queue.length;\n  for (let i = 0; i < len; i++) {\n    if (queue.get(i) === connection) {\n      queue.removeOne(i);\n      break;\n    }\n  }\n}\n\nclass Pool extends EventEmitter {\n  constructor(options) {\n    super();\n    this.config = options.config;\n    this.config.connectionConfig.pool = this;\n    this._allConnections = new Queue();\n    this._freeConnections = new Queue();\n    this._connectionQueue = new Queue();\n    this._closed = false;\n  }\n\n  promise(promiseImpl) {\n    const PromisePool = require('../promise').PromisePool;\n    return new PromisePool(this, promiseImpl);\n  }\n\n  getConnection(cb) {\n    if (this._closed) {\n      return process.nextTick(() => cb(new Error('Pool is closed.')));\n    }\n    let connection;\n    if (this._freeConnections.length > 0) {\n      connection = this._freeConnections.shift();\n      this.emit('acquire', connection);\n      return process.nextTick(() => cb(null, connection));\n    }\n    if (\n      this.config.connectionLimit === 0 ||\n      this._allConnections.length < this.config.connectionLimit\n    ) {\n      connection = new PoolConnection(this, {\n        config: this.config.connectionConfig\n      });\n      this._allConnections.push(connection);\n      return connection.connect(err => {\n        if (this._closed) {\n          return cb(new Error('Pool is closed.'));\n        }\n        if (err) {\n          return cb(err);\n        }\n        this.emit('connection', connection);\n        this.emit('acquire', connection);\n        return cb(null, connection);\n      });\n    }\n    if (!this.config.waitForConnections) {\n      return process.nextTick(() => cb(new Error('No connections available.')));\n    }\n    if (\n      this.config.queueLimit &&\n      this._connectionQueue.length >= this.config.queueLimit\n    ) {\n      return cb(new Error('Queue limit reached.'));\n    }\n    this.emit('enqueue');\n    return this._connectionQueue.push(cb);\n  }\n\n  releaseConnection(connection) {\n    let cb;\n    if (!connection._pool) {\n      // The connection has been removed from the pool and is no longer good.\n      if (this._connectionQueue.length) {\n        cb = this._connectionQueue.shift();\n        process.nextTick(this.getConnection.bind(this, cb));\n      }\n    } else if (this._connectionQueue.length) {\n      cb = this._connectionQueue.shift();\n      process.nextTick(cb.bind(null, null, connection));\n    } else {\n      this._freeConnections.push(connection);\n      this.emit('release', connection);\n    }\n  }\n\n  end(cb) {\n    this._closed = true;\n    if (typeof cb !== 'function') {\n      cb = function(err) {\n        if (err) {\n          throw err;\n        }\n      };\n    }\n    let calledBack = false;\n    let closedConnections = 0;\n    let connection;\n    const endCB = function(err) {\n      if (calledBack) {\n        return;\n      }\n      if (err || ++closedConnections >= this._allConnections.length) {\n        calledBack = true;\n        cb(err);\n        return;\n      }\n    }.bind(this);\n    if (this._allConnections.length === 0) {\n      endCB();\n      return;\n    }\n    for (let i = 0; i < this._allConnections.length; i++) {\n      connection = this._allConnections.get(i);\n      connection._realEnd(endCB);\n    }\n  }\n\n  query(sql, values, cb) {\n    const cmdQuery = Connection.createQuery(\n      sql,\n      values,\n      cb,\n      this.config.connectionConfig\n    );\n    if (typeof cmdQuery.namedPlaceholders === 'undefined') {\n      cmdQuery.namedPlaceholders = this.config.connectionConfig.namedPlaceholders;\n    }\n    this.getConnection((err, conn) => {\n      if (err) {\n        if (typeof cmdQuery.onResult === 'function') {\n          cmdQuery.onResult(err);\n        } else {\n          cmdQuery.emit('error', err);\n        }\n        return;\n      }\n      try {\n        conn.query(cmdQuery).once('end', () => {\n          conn.release();\n        });\n      } catch (e) {\n        conn.release();\n        throw e;\n      }\n    });\n    return cmdQuery;\n  }\n\n  execute(sql, values, cb) {\n    // TODO construct execute command first here and pass it to connection.execute\n    // so that polymorphic arguments logic is there in one place\n    if (typeof values === 'function') {\n      cb = values;\n      values = [];\n    }\n    this.getConnection((err, conn) => {\n      if (err) {\n        return cb(err);\n      }\n      try {\n        conn.execute(sql, values, cb).once('end', () => {\n          conn.release();\n        });\n      } catch (e) {\n        conn.release();\n        throw e;\n      }\n    });\n  }\n\n  _removeConnection(connection) {\n    // Remove connection from all connections\n    spliceConnection(this._allConnections, connection);\n    // Remove connection from free connections\n    spliceConnection(this._freeConnections, connection);\n    this.releaseConnection(connection);\n  }\n\n  format(sql, values) {\n    return mysql.format(\n      sql,\n      values,\n      this.config.connectionConfig.stringifyObjects,\n      this.config.connectionConfig.timezone\n    );\n  }\n\n  escape(value) {\n    return mysql.escape(\n      value,\n      this.config.connectionConfig.stringifyObjects,\n      this.config.connectionConfig.timezone\n    );\n  }\n\n  escapeId(value) {\n    return mysql.escapeId(value, false);\n  }\n}\n\nmodule.exports = Pool;\n"],"mappings":"AAAA;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,aAAD,CAArB;;AAEA,MAAME,YAAY,GAAGF,OAAO,CAAC,QAAD,CAAP,CAAkBE,YAAvC;;AACA,MAAMC,cAAc,GAAGH,OAAO,CAAC,sBAAD,CAA9B;;AACA,MAAMI,KAAK,GAAGJ,OAAO,CAAC,QAAD,CAArB;;AACA,MAAMK,UAAU,GAAGL,OAAO,CAAC,iBAAD,CAA1B;;AAEA,SAASM,gBAAT,CAA0BC,KAA1B,EAAiCC,UAAjC,EAA6C;EAC3C,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAlB;;EACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,GAApB,EAAyBE,CAAC,EAA1B,EAA8B;IAC5B,IAAIJ,KAAK,CAACK,GAAN,CAAUD,CAAV,MAAiBH,UAArB,EAAiC;MAC/BD,KAAK,CAACM,SAAN,CAAgBF,CAAhB;MACA;IACD;EACF;AACF;;AAED,MAAMG,IAAN,SAAmBZ,YAAnB,CAAgC;EAC9Ba,WAAW,CAACC,OAAD,EAAU;IACnB;IACA,KAAKC,MAAL,GAAcD,OAAO,CAACC,MAAtB;IACA,KAAKA,MAAL,CAAYC,gBAAZ,CAA6BC,IAA7B,GAAoC,IAApC;IACA,KAAKC,eAAL,GAAuB,IAAIhB,KAAJ,EAAvB;IACA,KAAKiB,gBAAL,GAAwB,IAAIjB,KAAJ,EAAxB;IACA,KAAKkB,gBAAL,GAAwB,IAAIlB,KAAJ,EAAxB;IACA,KAAKmB,OAAL,GAAe,KAAf;EACD;;EAEDC,OAAO,CAACC,WAAD,EAAc;IACnB,MAAMC,WAAW,GAAG1B,OAAO,CAAC,YAAD,CAAP,CAAsB0B,WAA1C;;IACA,OAAO,IAAIA,WAAJ,CAAgB,IAAhB,EAAsBD,WAAtB,CAAP;EACD;;EAEDE,aAAa,CAACC,EAAD,EAAK;IAChB,IAAI,KAAKL,OAAT,EAAkB;MAChB,OAAOxB,OAAO,CAAC8B,QAAR,CAAiB,MAAMD,EAAE,CAAC,IAAIE,KAAJ,CAAU,iBAAV,CAAD,CAAzB,CAAP;IACD;;IACD,IAAItB,UAAJ;;IACA,IAAI,KAAKa,gBAAL,CAAsBX,MAAtB,GAA+B,CAAnC,EAAsC;MACpCF,UAAU,GAAG,KAAKa,gBAAL,CAAsBU,KAAtB,EAAb;MACA,KAAKC,IAAL,CAAU,SAAV,EAAqBxB,UAArB;MACA,OAAOT,OAAO,CAAC8B,QAAR,CAAiB,MAAMD,EAAE,CAAC,IAAD,EAAOpB,UAAP,CAAzB,CAAP;IACD;;IACD,IACE,KAAKS,MAAL,CAAYgB,eAAZ,KAAgC,CAAhC,IACA,KAAKb,eAAL,CAAqBV,MAArB,GAA8B,KAAKO,MAAL,CAAYgB,eAF5C,EAGE;MACAzB,UAAU,GAAG,IAAIL,cAAJ,CAAmB,IAAnB,EAAyB;QACpCc,MAAM,EAAE,KAAKA,MAAL,CAAYC;MADgB,CAAzB,CAAb;;MAGA,KAAKE,eAAL,CAAqBc,IAArB,CAA0B1B,UAA1B;;MACA,OAAOA,UAAU,CAAC2B,OAAX,CAAmBC,GAAG,IAAI;QAC/B,IAAI,KAAKb,OAAT,EAAkB;UAChB,OAAOK,EAAE,CAAC,IAAIE,KAAJ,CAAU,iBAAV,CAAD,CAAT;QACD;;QACD,IAAIM,GAAJ,EAAS;UACP,OAAOR,EAAE,CAACQ,GAAD,CAAT;QACD;;QACD,KAAKJ,IAAL,CAAU,YAAV,EAAwBxB,UAAxB;QACA,KAAKwB,IAAL,CAAU,SAAV,EAAqBxB,UAArB;QACA,OAAOoB,EAAE,CAAC,IAAD,EAAOpB,UAAP,CAAT;MACD,CAVM,CAAP;IAWD;;IACD,IAAI,CAAC,KAAKS,MAAL,CAAYoB,kBAAjB,EAAqC;MACnC,OAAOtC,OAAO,CAAC8B,QAAR,CAAiB,MAAMD,EAAE,CAAC,IAAIE,KAAJ,CAAU,2BAAV,CAAD,CAAzB,CAAP;IACD;;IACD,IACE,KAAKb,MAAL,CAAYqB,UAAZ,IACA,KAAKhB,gBAAL,CAAsBZ,MAAtB,IAAgC,KAAKO,MAAL,CAAYqB,UAF9C,EAGE;MACA,OAAOV,EAAE,CAAC,IAAIE,KAAJ,CAAU,sBAAV,CAAD,CAAT;IACD;;IACD,KAAKE,IAAL,CAAU,SAAV;IACA,OAAO,KAAKV,gBAAL,CAAsBY,IAAtB,CAA2BN,EAA3B,CAAP;EACD;;EAEDW,iBAAiB,CAAC/B,UAAD,EAAa;IAC5B,IAAIoB,EAAJ;;IACA,IAAI,CAACpB,UAAU,CAACgC,KAAhB,EAAuB;MACrB;MACA,IAAI,KAAKlB,gBAAL,CAAsBZ,MAA1B,EAAkC;QAChCkB,EAAE,GAAG,KAAKN,gBAAL,CAAsBS,KAAtB,EAAL;QACAhC,OAAO,CAAC8B,QAAR,CAAiB,KAAKF,aAAL,CAAmBc,IAAnB,CAAwB,IAAxB,EAA8Bb,EAA9B,CAAjB;MACD;IACF,CAND,MAMO,IAAI,KAAKN,gBAAL,CAAsBZ,MAA1B,EAAkC;MACvCkB,EAAE,GAAG,KAAKN,gBAAL,CAAsBS,KAAtB,EAAL;MACAhC,OAAO,CAAC8B,QAAR,CAAiBD,EAAE,CAACa,IAAH,CAAQ,IAAR,EAAc,IAAd,EAAoBjC,UAApB,CAAjB;IACD,CAHM,MAGA;MACL,KAAKa,gBAAL,CAAsBa,IAAtB,CAA2B1B,UAA3B;;MACA,KAAKwB,IAAL,CAAU,SAAV,EAAqBxB,UAArB;IACD;EACF;;EAEDkC,GAAG,CAACd,EAAD,EAAK;IACN,KAAKL,OAAL,GAAe,IAAf;;IACA,IAAI,OAAOK,EAAP,KAAc,UAAlB,EAA8B;MAC5BA,EAAE,GAAG,UAASQ,GAAT,EAAc;QACjB,IAAIA,GAAJ,EAAS;UACP,MAAMA,GAAN;QACD;MACF,CAJD;IAKD;;IACD,IAAIO,UAAU,GAAG,KAAjB;IACA,IAAIC,iBAAiB,GAAG,CAAxB;IACA,IAAIpC,UAAJ;;IACA,MAAMqC,KAAK,GAAG,UAAST,GAAT,EAAc;MAC1B,IAAIO,UAAJ,EAAgB;QACd;MACD;;MACD,IAAIP,GAAG,IAAI,EAAEQ,iBAAF,IAAuB,KAAKxB,eAAL,CAAqBV,MAAvD,EAA+D;QAC7DiC,UAAU,GAAG,IAAb;QACAf,EAAE,CAACQ,GAAD,CAAF;QACA;MACD;IACF,CATa,CASZK,IATY,CASP,IATO,CAAd;;IAUA,IAAI,KAAKrB,eAAL,CAAqBV,MAArB,KAAgC,CAApC,EAAuC;MACrCmC,KAAK;MACL;IACD;;IACD,KAAK,IAAIlC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKS,eAAL,CAAqBV,MAAzC,EAAiDC,CAAC,EAAlD,EAAsD;MACpDH,UAAU,GAAG,KAAKY,eAAL,CAAqBR,GAArB,CAAyBD,CAAzB,CAAb;;MACAH,UAAU,CAACsC,QAAX,CAAoBD,KAApB;IACD;EACF;;EAEDE,KAAK,CAACC,GAAD,EAAMC,MAAN,EAAcrB,EAAd,EAAkB;IACrB,MAAMsB,QAAQ,GAAG7C,UAAU,CAAC8C,WAAX,CACfH,GADe,EAEfC,MAFe,EAGfrB,EAHe,EAIf,KAAKX,MAAL,CAAYC,gBAJG,CAAjB;;IAMA,IAAI,OAAOgC,QAAQ,CAACE,iBAAhB,KAAsC,WAA1C,EAAuD;MACrDF,QAAQ,CAACE,iBAAT,GAA6B,KAAKnC,MAAL,CAAYC,gBAAZ,CAA6BkC,iBAA1D;IACD;;IACD,KAAKzB,aAAL,CAAmB,CAACS,GAAD,EAAMiB,IAAN,KAAe;MAChC,IAAIjB,GAAJ,EAAS;QACP,IAAI,OAAOc,QAAQ,CAACI,QAAhB,KAA6B,UAAjC,EAA6C;UAC3CJ,QAAQ,CAACI,QAAT,CAAkBlB,GAAlB;QACD,CAFD,MAEO;UACLc,QAAQ,CAAClB,IAAT,CAAc,OAAd,EAAuBI,GAAvB;QACD;;QACD;MACD;;MACD,IAAI;QACFiB,IAAI,CAACN,KAAL,CAAWG,QAAX,EAAqBK,IAArB,CAA0B,KAA1B,EAAiC,MAAM;UACrCF,IAAI,CAACG,OAAL;QACD,CAFD;MAGD,CAJD,CAIE,OAAOC,CAAP,EAAU;QACVJ,IAAI,CAACG,OAAL;QACA,MAAMC,CAAN;MACD;IACF,CAjBD;IAkBA,OAAOP,QAAP;EACD;;EAEDQ,OAAO,CAACV,GAAD,EAAMC,MAAN,EAAcrB,EAAd,EAAkB;IACvB;IACA;IACA,IAAI,OAAOqB,MAAP,KAAkB,UAAtB,EAAkC;MAChCrB,EAAE,GAAGqB,MAAL;MACAA,MAAM,GAAG,EAAT;IACD;;IACD,KAAKtB,aAAL,CAAmB,CAACS,GAAD,EAAMiB,IAAN,KAAe;MAChC,IAAIjB,GAAJ,EAAS;QACP,OAAOR,EAAE,CAACQ,GAAD,CAAT;MACD;;MACD,IAAI;QACFiB,IAAI,CAACK,OAAL,CAAaV,GAAb,EAAkBC,MAAlB,EAA0BrB,EAA1B,EAA8B2B,IAA9B,CAAmC,KAAnC,EAA0C,MAAM;UAC9CF,IAAI,CAACG,OAAL;QACD,CAFD;MAGD,CAJD,CAIE,OAAOC,CAAP,EAAU;QACVJ,IAAI,CAACG,OAAL;QACA,MAAMC,CAAN;MACD;IACF,CAZD;EAaD;;EAEDE,iBAAiB,CAACnD,UAAD,EAAa;IAC5B;IACAF,gBAAgB,CAAC,KAAKc,eAAN,EAAuBZ,UAAvB,CAAhB,CAF4B,CAG5B;;IACAF,gBAAgB,CAAC,KAAKe,gBAAN,EAAwBb,UAAxB,CAAhB;IACA,KAAK+B,iBAAL,CAAuB/B,UAAvB;EACD;;EAEDoD,MAAM,CAACZ,GAAD,EAAMC,MAAN,EAAc;IAClB,OAAOhD,KAAK,CAAC2D,MAAN,CACLZ,GADK,EAELC,MAFK,EAGL,KAAKhC,MAAL,CAAYC,gBAAZ,CAA6B2C,gBAHxB,EAIL,KAAK5C,MAAL,CAAYC,gBAAZ,CAA6B4C,QAJxB,CAAP;EAMD;;EAEDC,MAAM,CAACC,KAAD,EAAQ;IACZ,OAAO/D,KAAK,CAAC8D,MAAN,CACLC,KADK,EAEL,KAAK/C,MAAL,CAAYC,gBAAZ,CAA6B2C,gBAFxB,EAGL,KAAK5C,MAAL,CAAYC,gBAAZ,CAA6B4C,QAHxB,CAAP;EAKD;;EAEDG,QAAQ,CAACD,KAAD,EAAQ;IACd,OAAO/D,KAAK,CAACgE,QAAN,CAAeD,KAAf,EAAsB,KAAtB,CAAP;EACD;;AA5L6B;;AA+LhCE,MAAM,CAACC,OAAP,GAAiBrD,IAAjB"},"metadata":{},"sourceType":"script"}