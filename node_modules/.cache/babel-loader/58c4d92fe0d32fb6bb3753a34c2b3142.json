{"ast":null,"code":"'use strict';\n\nconst Command = require('./command.js');\n\nconst Query = require('./query.js');\n\nconst Packets = require('../packets/index.js');\n\nconst getBinaryParser = require('../parsers/binary_parser.js');\n\nclass Execute extends Command {\n  constructor(options, callback) {\n    super();\n    this.statement = options.statement;\n    this.sql = options.sql;\n    this.values = options.values;\n    this.onResult = callback;\n    this.parameters = options.values;\n    this.insertId = 0;\n    this.timeout = options.timeout;\n    this.queryTimeout = null;\n    this._rows = [];\n    this._fields = [];\n    this._result = [];\n    this._fieldCount = 0;\n    this._rowParser = null;\n    this._executeOptions = options;\n    this._resultIndex = 0;\n    this._localStream = null;\n\n    this._unpipeStream = function () {};\n\n    this._streamFactory = options.infileStreamFactory;\n    this._connection = null;\n  }\n\n  buildParserFromFields(fields, connection) {\n    return getBinaryParser(fields, this.options, connection.config);\n  }\n\n  start(packet, connection) {\n    this._connection = connection;\n    this.options = Object.assign({}, connection.config, this._executeOptions);\n\n    this._setTimeout();\n\n    const executePacket = new Packets.Execute(this.statement.id, this.parameters, connection.config.charsetNumber, connection.config.timezone); //For reasons why this try-catch is here, please see\n    // https://github.com/sidorares/node-mysql2/pull/689\n    //For additional discussion, see\n    // 1. https://github.com/sidorares/node-mysql2/issues/493\n    // 2. https://github.com/sidorares/node-mysql2/issues/187\n    // 3. https://github.com/sidorares/node-mysql2/issues/480\n\n    try {\n      connection.writePacket(executePacket.toPacket(1));\n    } catch (error) {\n      this.onResult(error);\n    }\n\n    return Execute.prototype.resultsetHeader;\n  }\n\n  readField(packet, connection) {\n    let fields; // disabling for now, but would be great to find reliable way to parse fields only once\n    // fields reported by prepare can be empty at all or just incorrect - see #169\n    //\n    // perfomance optimisation: if we already have this field parsed in statement header, use one from header\n    // const field = this.statement.columns.length == this._fieldCount ?\n    //  this.statement.columns[this._receivedFieldsCount] : new Packets.ColumnDefinition(packet);\n\n    const field = new Packets.ColumnDefinition(packet, connection.clientEncoding);\n    this._receivedFieldsCount++;\n\n    this._fields[this._resultIndex].push(field);\n\n    if (this._receivedFieldsCount === this._fieldCount) {\n      fields = this._fields[this._resultIndex];\n      this.emit('fields', fields, this._resultIndex);\n      return Execute.prototype.fieldsEOF;\n    }\n\n    return Execute.prototype.readField;\n  }\n\n  fieldsEOF(packet, connection) {\n    // check EOF\n    if (!packet.isEOF()) {\n      return connection.protocolError('Expected EOF packet');\n    }\n\n    this._rowParser = new (this.buildParserFromFields(this._fields[this._resultIndex], connection))();\n    return Execute.prototype.row;\n  }\n\n}\n\nExecute.prototype.done = Query.prototype.done;\nExecute.prototype.doneInsert = Query.prototype.doneInsert;\nExecute.prototype.resultsetHeader = Query.prototype.resultsetHeader;\nExecute.prototype._findOrCreateReadStream = Query.prototype._findOrCreateReadStream;\nExecute.prototype._streamLocalInfile = Query.prototype._streamLocalInfile;\nExecute.prototype._setTimeout = Query.prototype._setTimeout;\nExecute.prototype._handleTimeoutError = Query.prototype._handleTimeoutError;\nExecute.prototype.row = Query.prototype.row;\nExecute.prototype.stream = Query.prototype.stream;\nmodule.exports = Execute;","map":{"version":3,"names":["Command","require","Query","Packets","getBinaryParser","Execute","constructor","options","callback","statement","sql","values","onResult","parameters","insertId","timeout","queryTimeout","_rows","_fields","_result","_fieldCount","_rowParser","_executeOptions","_resultIndex","_localStream","_unpipeStream","_streamFactory","infileStreamFactory","_connection","buildParserFromFields","fields","connection","config","start","packet","Object","assign","_setTimeout","executePacket","id","charsetNumber","timezone","writePacket","toPacket","error","prototype","resultsetHeader","readField","field","ColumnDefinition","clientEncoding","_receivedFieldsCount","push","emit","fieldsEOF","isEOF","protocolError","row","done","doneInsert","_findOrCreateReadStream","_streamLocalInfile","_handleTimeoutError","stream","module","exports"],"sources":["/home/emilio/√Årea de Trabalho/OneBitCode-aulas/REACT/site-react-login-live/react-controlledForms/node_modules/mysql2/lib/commands/execute.js"],"sourcesContent":["'use strict';\n\nconst Command = require('./command.js');\nconst Query = require('./query.js');\nconst Packets = require('../packets/index.js');\n\nconst getBinaryParser = require('../parsers/binary_parser.js');\n\nclass Execute extends Command {\n  constructor(options, callback) {\n    super();\n    this.statement = options.statement;\n    this.sql = options.sql;\n    this.values = options.values;\n    this.onResult = callback;\n    this.parameters = options.values;\n    this.insertId = 0;\n    this.timeout = options.timeout;\n    this.queryTimeout = null;\n    this._rows = [];\n    this._fields = [];\n    this._result = [];\n    this._fieldCount = 0;\n    this._rowParser = null;\n    this._executeOptions = options;\n    this._resultIndex = 0;\n    this._localStream = null;\n    this._unpipeStream = function() {};\n    this._streamFactory = options.infileStreamFactory;\n    this._connection = null;\n  }\n\n  buildParserFromFields(fields, connection) {\n    return getBinaryParser(fields, this.options, connection.config);\n  }\n\n  start(packet, connection) {\n    this._connection = connection;\n    this.options = Object.assign({}, connection.config, this._executeOptions);\n    this._setTimeout();\n    const executePacket = new Packets.Execute(\n      this.statement.id,\n      this.parameters,\n      connection.config.charsetNumber,\n      connection.config.timezone\n    );\n    //For reasons why this try-catch is here, please see\n    // https://github.com/sidorares/node-mysql2/pull/689\n    //For additional discussion, see\n    // 1. https://github.com/sidorares/node-mysql2/issues/493\n    // 2. https://github.com/sidorares/node-mysql2/issues/187\n    // 3. https://github.com/sidorares/node-mysql2/issues/480\n    try {\n      connection.writePacket(executePacket.toPacket(1));\n    } catch (error) {\n      this.onResult(error);\n    }\n    return Execute.prototype.resultsetHeader;\n  }\n\n  readField(packet, connection) {\n    let fields;\n    // disabling for now, but would be great to find reliable way to parse fields only once\n    // fields reported by prepare can be empty at all or just incorrect - see #169\n    //\n    // perfomance optimisation: if we already have this field parsed in statement header, use one from header\n    // const field = this.statement.columns.length == this._fieldCount ?\n    //  this.statement.columns[this._receivedFieldsCount] : new Packets.ColumnDefinition(packet);\n    const field = new Packets.ColumnDefinition(\n      packet,\n      connection.clientEncoding\n    );\n    this._receivedFieldsCount++;\n    this._fields[this._resultIndex].push(field);\n    if (this._receivedFieldsCount === this._fieldCount) {\n      fields = this._fields[this._resultIndex];\n      this.emit('fields', fields, this._resultIndex);\n      return Execute.prototype.fieldsEOF;\n    }\n    return Execute.prototype.readField;\n  }\n\n  fieldsEOF(packet, connection) {\n    // check EOF\n    if (!packet.isEOF()) {\n      return connection.protocolError('Expected EOF packet');\n    }\n    this._rowParser = new (this.buildParserFromFields(\n      this._fields[this._resultIndex],\n      connection\n    ))();\n    return Execute.prototype.row;\n  }\n}\n\nExecute.prototype.done = Query.prototype.done;\nExecute.prototype.doneInsert = Query.prototype.doneInsert;\nExecute.prototype.resultsetHeader = Query.prototype.resultsetHeader;\nExecute.prototype._findOrCreateReadStream =\n  Query.prototype._findOrCreateReadStream;\nExecute.prototype._streamLocalInfile = Query.prototype._streamLocalInfile;\nExecute.prototype._setTimeout = Query.prototype._setTimeout;\nExecute.prototype._handleTimeoutError = Query.prototype._handleTimeoutError;\nExecute.prototype.row = Query.prototype.row;\nExecute.prototype.stream = Query.prototype.stream;\n\nmodule.exports = Execute;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}