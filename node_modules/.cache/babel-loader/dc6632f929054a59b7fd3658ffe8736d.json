{"ast":null,"code":"'use strict';\n\nconst Packet = require('../packets/packet');\n\nconst StringParser = require('../parsers/string');\n\nconst CharsetToEncoding = require('../constants/charset_encodings.js');\n\nconst fields = ['catalog', 'schema', 'table', 'orgTable', 'name', 'orgName']; // creating JS string is relatively expensive (compared to\n// reading few bytes from buffer) because all string properties\n// except for name are unlikely to be used we postpone\n// string conversion until property access\n//\n// TODO: watch for integration benchmarks (one with real network buffer)\n// there could be bad side effect as keeping reference to a buffer makes it\n// sit in the memory longer (usually until final .query() callback)\n// Latest v8 perform much better in regard to bufferer -> string conversion,\n// at some point of time this optimisation might become unnecessary\n// see https://github.com/sidorares/node-mysql2/pull/137\n//\n\nclass ColumnDefinition {\n  constructor(packet, clientEncoding) {\n    this._buf = packet.buffer;\n    this._clientEncoding = clientEncoding;\n    this._catalogLength = packet.readLengthCodedNumber();\n    this._catalogStart = packet.offset;\n    packet.offset += this._catalogLength;\n    this._schemaLength = packet.readLengthCodedNumber();\n    this._schemaStart = packet.offset;\n    packet.offset += this._schemaLength;\n    this._tableLength = packet.readLengthCodedNumber();\n    this._tableStart = packet.offset;\n    packet.offset += this._tableLength;\n    this._orgTableLength = packet.readLengthCodedNumber();\n    this._orgTableStart = packet.offset;\n    packet.offset += this._orgTableLength; // name is always used, don't make it lazy\n\n    const _nameLength = packet.readLengthCodedNumber();\n\n    const _nameStart = packet.offset;\n    packet.offset += _nameLength;\n    this._orgNameLength = packet.readLengthCodedNumber();\n    this._orgNameStart = packet.offset;\n    packet.offset += this._orgNameLength;\n    packet.skip(1); //  length of the following fields (always 0x0c)\n\n    this.characterSet = packet.readInt16();\n    this.encoding = CharsetToEncoding[this.characterSet];\n    this.name = StringParser.decode(this._buf, this.encoding === 'binary' ? this._clientEncoding : this.encoding, _nameStart, _nameStart + _nameLength);\n    this.columnLength = packet.readInt32();\n    this.columnType = packet.readInt8();\n    this.flags = packet.readInt16();\n    this.decimals = packet.readInt8();\n  }\n\n  inspect() {\n    return {\n      catalog: this.catalog,\n      schema: this.schema,\n      name: this.name,\n      orgName: this.orgName,\n      table: this.table,\n      orgTable: this.orgTable,\n      characterSet: this.characterSet,\n      columnLength: this.columnLength,\n      columnType: this.columnType,\n      flags: this.flags,\n      decimals: this.decimals\n    };\n  }\n\n  static toPacket(column, sequenceId) {\n    let length = 17; // = 4 padding + 1 + 12 for the rest\n\n    fields.forEach(field => {\n      length += Packet.lengthCodedStringLength(column[field], CharsetToEncoding[column.characterSet]);\n    });\n    const buffer = Buffer.allocUnsafe(length);\n    const packet = new Packet(sequenceId, buffer, 0, length);\n\n    function writeField(name) {\n      packet.writeLengthCodedString(column[name], CharsetToEncoding[column.characterSet]);\n    }\n\n    packet.offset = 4;\n    fields.forEach(writeField);\n    packet.writeInt8(0x0c);\n    packet.writeInt16(column.characterSet);\n    packet.writeInt32(column.columnLength);\n    packet.writeInt8(column.columnType);\n    packet.writeInt16(column.flags);\n    packet.writeInt8(column.decimals);\n    packet.writeInt16(0); // filler\n\n    return packet;\n  } // node-mysql compatibility: alias \"db\" to \"schema\"\n\n\n  get db() {\n    return this.schema;\n  }\n\n}\n\nconst addString = function (name) {\n  Object.defineProperty(ColumnDefinition.prototype, name, {\n    get: function () {\n      const start = this[`_${name}Start`];\n      const end = start + this[`_${name}Length`];\n      const val = StringParser.decode(this._buf, this.encoding === 'binary' ? this._clientEncoding : this.encoding, start, end);\n      Object.defineProperty(this, name, {\n        value: val,\n        writable: false,\n        configurable: false,\n        enumerable: false\n      });\n      return val;\n    }\n  });\n};\n\naddString('catalog');\naddString('schema');\naddString('table');\naddString('orgTable');\naddString('orgName');\nmodule.exports = ColumnDefinition;","map":{"version":3,"names":["Packet","require","StringParser","CharsetToEncoding","fields","ColumnDefinition","constructor","packet","clientEncoding","_buf","buffer","_clientEncoding","_catalogLength","readLengthCodedNumber","_catalogStart","offset","_schemaLength","_schemaStart","_tableLength","_tableStart","_orgTableLength","_orgTableStart","_nameLength","_nameStart","_orgNameLength","_orgNameStart","skip","characterSet","readInt16","encoding","name","decode","columnLength","readInt32","columnType","readInt8","flags","decimals","inspect","catalog","schema","orgName","table","orgTable","toPacket","column","sequenceId","length","forEach","field","lengthCodedStringLength","Buffer","allocUnsafe","writeField","writeLengthCodedString","writeInt8","writeInt16","writeInt32","db","addString","Object","defineProperty","prototype","get","start","end","val","value","writable","configurable","enumerable","module","exports"],"sources":["/home/emilio/Área de Trabalho/OneBitCode-aulas/REACT/site-react-login-live/react-controlledForms/node_modules/mysql2/lib/packets/column_definition.js"],"sourcesContent":["'use strict';\n\nconst Packet = require('../packets/packet');\nconst StringParser = require('../parsers/string');\nconst CharsetToEncoding = require('../constants/charset_encodings.js');\n\nconst fields = ['catalog', 'schema', 'table', 'orgTable', 'name', 'orgName'];\n\n// creating JS string is relatively expensive (compared to\n// reading few bytes from buffer) because all string properties\n// except for name are unlikely to be used we postpone\n// string conversion until property access\n//\n// TODO: watch for integration benchmarks (one with real network buffer)\n// there could be bad side effect as keeping reference to a buffer makes it\n// sit in the memory longer (usually until final .query() callback)\n// Latest v8 perform much better in regard to bufferer -> string conversion,\n// at some point of time this optimisation might become unnecessary\n// see https://github.com/sidorares/node-mysql2/pull/137\n//\nclass ColumnDefinition {\n  constructor(packet, clientEncoding) {\n    this._buf = packet.buffer;\n    this._clientEncoding = clientEncoding;\n    this._catalogLength = packet.readLengthCodedNumber();\n    this._catalogStart = packet.offset;\n    packet.offset += this._catalogLength;\n    this._schemaLength = packet.readLengthCodedNumber();\n    this._schemaStart = packet.offset;\n    packet.offset += this._schemaLength;\n    this._tableLength = packet.readLengthCodedNumber();\n    this._tableStart = packet.offset;\n    packet.offset += this._tableLength;\n    this._orgTableLength = packet.readLengthCodedNumber();\n    this._orgTableStart = packet.offset;\n    packet.offset += this._orgTableLength;\n    // name is always used, don't make it lazy\n    const _nameLength = packet.readLengthCodedNumber();\n    const _nameStart = packet.offset;\n    packet.offset += _nameLength;\n    this._orgNameLength = packet.readLengthCodedNumber();\n    this._orgNameStart = packet.offset;\n    packet.offset += this._orgNameLength;\n    packet.skip(1); //  length of the following fields (always 0x0c)\n    this.characterSet = packet.readInt16();\n    this.encoding = CharsetToEncoding[this.characterSet];\n    this.name = StringParser.decode(\n      this._buf,\n      this.encoding === 'binary' ? this._clientEncoding : this.encoding,\n      _nameStart, \n      _nameStart + _nameLength\n    );\n    this.columnLength = packet.readInt32();\n    this.columnType = packet.readInt8();\n    this.flags = packet.readInt16();\n    this.decimals = packet.readInt8();\n  }\n\n  inspect() {\n    return {\n      catalog: this.catalog,\n      schema: this.schema,\n      name: this.name,\n      orgName: this.orgName,\n      table: this.table,\n      orgTable: this.orgTable,\n      characterSet: this.characterSet,\n      columnLength: this.columnLength,\n      columnType: this.columnType,\n      flags: this.flags,\n      decimals: this.decimals\n    };\n  }\n\n  static toPacket(column, sequenceId) {\n    let length = 17; // = 4 padding + 1 + 12 for the rest\n    fields.forEach(field => {\n      length += Packet.lengthCodedStringLength(\n        column[field],\n        CharsetToEncoding[column.characterSet]\n      );\n    });\n    const buffer = Buffer.allocUnsafe(length);\n\n    const packet = new Packet(sequenceId, buffer, 0, length);\n    function writeField(name) {\n      packet.writeLengthCodedString(\n        column[name],\n        CharsetToEncoding[column.characterSet]\n      );\n    }\n    packet.offset = 4;\n    fields.forEach(writeField);\n    packet.writeInt8(0x0c);\n    packet.writeInt16(column.characterSet);\n    packet.writeInt32(column.columnLength);\n    packet.writeInt8(column.columnType);\n    packet.writeInt16(column.flags);\n    packet.writeInt8(column.decimals);\n    packet.writeInt16(0); // filler\n    return packet;\n  }\n\n  // node-mysql compatibility: alias \"db\" to \"schema\"\n  get db() {\n    return this.schema;\n  }\n}\n\nconst addString = function(name) {\n  Object.defineProperty(ColumnDefinition.prototype, name, {\n    get: function() {\n      const start = this[`_${name}Start`];\n      const end = start + this[`_${name}Length`];\n      const val = StringParser.decode(\n        this._buf,\n        this.encoding === 'binary' ? this._clientEncoding : this.encoding,\n        start, \n        end\n      );\n      \n      Object.defineProperty(this, name, {\n        value: val,\n        writable: false,\n        configurable: false,\n        enumerable: false\n      });\n\n      return val;\n    }\n  });\n};\n\naddString('catalog');\naddString('schema');\naddString('table');\naddString('orgTable');\naddString('orgName');\n\nmodule.exports = ColumnDefinition;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}