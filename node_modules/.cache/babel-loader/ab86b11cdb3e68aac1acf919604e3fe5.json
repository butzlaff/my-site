{"ast":null,"code":"'use strict'; // TODO: rename to OK packet\n// https://dev.mysql.com/doc/internals/en/packet-OK_Packet.html\n\nconst Packet = require('./packet.js');\n\nconst ClientConstants = require('../constants/client.js');\n\nconst ServerSatusFlags = require('../constants/server_status.js');\n\nconst EncodingToCharset = require('../constants/encoding_charset.js');\n\nconst sessionInfoTypes = require('../constants/session_track.js');\n\nclass ResultSetHeader {\n  constructor(packet, connection) {\n    const bigNumberStrings = connection.config.bigNumberStrings;\n    const encoding = connection.serverEncoding;\n    const flags = connection._handshakePacket.capabilityFlags;\n\n    const isSet = function (flag) {\n      return flags & ClientConstants[flag];\n    };\n\n    if (packet.buffer[packet.offset] !== 0) {\n      this.fieldCount = packet.readLengthCodedNumber();\n\n      if (this.fieldCount === null) {\n        this.infileName = packet.readString(undefined, encoding);\n      }\n\n      return;\n    }\n\n    this.fieldCount = packet.readInt8(); // skip OK byte\n\n    this.affectedRows = packet.readLengthCodedNumber(bigNumberStrings);\n    this.insertId = packet.readLengthCodedNumberSigned(bigNumberStrings);\n    this.info = '';\n\n    if (isSet('PROTOCOL_41')) {\n      this.serverStatus = packet.readInt16();\n      this.warningStatus = packet.readInt16();\n    } else if (isSet('TRANSACTIONS')) {\n      this.serverStatus = packet.readInt16();\n    }\n\n    let stateChanges = null;\n\n    if (isSet('SESSION_TRACK') && packet.offset < packet.end) {\n      this.info = packet.readLengthCodedString(encoding);\n\n      if (this.serverStatus && ServerSatusFlags.SERVER_SESSION_STATE_CHANGED) {\n        // session change info record - see\n        // https://dev.mysql.com/doc/internals/en/packet-OK_Packet.html#cs-sect-packet-ok-sessioninfo\n        let len = packet.offset < packet.end ? packet.readLengthCodedNumber() : 0;\n        const end = packet.offset + len;\n        let type, key, stateEnd;\n\n        if (len > 0) {\n          stateChanges = {\n            systemVariables: {},\n            schema: null,\n            trackStateChange: null\n          };\n        }\n\n        while (packet.offset < end) {\n          type = packet.readInt8();\n          len = packet.readLengthCodedNumber();\n          stateEnd = packet.offset + len;\n\n          if (type === sessionInfoTypes.SYSTEM_VARIABLES) {\n            key = packet.readLengthCodedString(encoding);\n            const val = packet.readLengthCodedString(encoding);\n            stateChanges.systemVariables[key] = val;\n\n            if (key === 'character_set_client') {\n              const charsetNumber = EncodingToCharset[val];\n              connection.config.charsetNumber = charsetNumber;\n            }\n          } else if (type === sessionInfoTypes.SCHEMA) {\n            key = packet.readLengthCodedString(encoding);\n            stateChanges.schema = key;\n          } else if (type === sessionInfoTypes.STATE_CHANGE) {\n            stateChanges.trackStateChange = packet.readLengthCodedString(encoding);\n          } else {// unsupported session track type. For now just ignore\n          }\n\n          packet.offset = stateEnd;\n        }\n      }\n    } else {\n      this.info = packet.readString(undefined, encoding);\n    }\n\n    if (stateChanges) {\n      this.stateChanges = stateChanges;\n    }\n\n    const m = this.info.match(/\\schanged:\\s*(\\d+)/i);\n\n    if (m !== null) {\n      this.changedRows = parseInt(m[1], 10);\n    }\n  } // TODO: should be consistent instance member, but it's just easier here to have just function\n\n\n  static toPacket(fieldCount, insertId) {\n    let length = 4 + Packet.lengthCodedNumberLength(fieldCount);\n\n    if (typeof insertId !== 'undefined') {\n      length += Packet.lengthCodedNumberLength(insertId);\n    }\n\n    const buffer = Buffer.allocUnsafe(length);\n    const packet = new Packet(0, buffer, 0, length);\n    packet.offset = 4;\n    packet.writeLengthCodedNumber(fieldCount);\n\n    if (typeof insertId !== 'undefined') {\n      packet.writeLengthCodedNumber(insertId);\n    }\n\n    return packet;\n  }\n\n}\n\nmodule.exports = ResultSetHeader;","map":{"version":3,"names":["Packet","require","ClientConstants","ServerSatusFlags","EncodingToCharset","sessionInfoTypes","ResultSetHeader","constructor","packet","connection","bigNumberStrings","config","encoding","serverEncoding","flags","_handshakePacket","capabilityFlags","isSet","flag","buffer","offset","fieldCount","readLengthCodedNumber","infileName","readString","undefined","readInt8","affectedRows","insertId","readLengthCodedNumberSigned","info","serverStatus","readInt16","warningStatus","stateChanges","end","readLengthCodedString","SERVER_SESSION_STATE_CHANGED","len","type","key","stateEnd","systemVariables","schema","trackStateChange","SYSTEM_VARIABLES","val","charsetNumber","SCHEMA","STATE_CHANGE","m","match","changedRows","parseInt","toPacket","length","lengthCodedNumberLength","Buffer","allocUnsafe","writeLengthCodedNumber","module","exports"],"sources":["/home/emilio/Área de Trabalho/OneBitCode-aulas/REACT/site-react-login-live/react-controlledForms/node_modules/mysql2/lib/packets/resultset_header.js"],"sourcesContent":["'use strict';\n\n// TODO: rename to OK packet\n// https://dev.mysql.com/doc/internals/en/packet-OK_Packet.html\n\nconst Packet = require('./packet.js');\nconst ClientConstants = require('../constants/client.js');\nconst ServerSatusFlags = require('../constants/server_status.js');\n\nconst EncodingToCharset = require('../constants/encoding_charset.js');\nconst sessionInfoTypes = require('../constants/session_track.js');\n\nclass ResultSetHeader {\n  constructor(packet, connection) {\n    const bigNumberStrings = connection.config.bigNumberStrings;\n    const encoding = connection.serverEncoding;\n    const flags = connection._handshakePacket.capabilityFlags;\n    const isSet = function(flag) {\n      return flags & ClientConstants[flag];\n    };\n    if (packet.buffer[packet.offset] !== 0) {\n      this.fieldCount = packet.readLengthCodedNumber();\n      if (this.fieldCount === null) {\n        this.infileName = packet.readString(undefined, encoding);\n      }\n      return;\n    }\n    this.fieldCount = packet.readInt8(); // skip OK byte\n    this.affectedRows = packet.readLengthCodedNumber(bigNumberStrings);\n    this.insertId = packet.readLengthCodedNumberSigned(bigNumberStrings);\n    this.info = '';\n    if (isSet('PROTOCOL_41')) {\n      this.serverStatus = packet.readInt16();\n      this.warningStatus = packet.readInt16();\n    } else if (isSet('TRANSACTIONS')) {\n      this.serverStatus = packet.readInt16();\n    }\n    let stateChanges = null;\n    if (isSet('SESSION_TRACK') && packet.offset < packet.end) {\n      this.info = packet.readLengthCodedString(encoding);\n\n      if (this.serverStatus && ServerSatusFlags.SERVER_SESSION_STATE_CHANGED) {\n        // session change info record - see\n        // https://dev.mysql.com/doc/internals/en/packet-OK_Packet.html#cs-sect-packet-ok-sessioninfo\n        let len =\n          packet.offset < packet.end ? packet.readLengthCodedNumber() : 0;\n        const end = packet.offset + len;\n        let type, key, stateEnd;\n        if (len > 0) {\n          stateChanges = {\n            systemVariables: {},\n            schema: null,\n            trackStateChange: null\n          };\n        }\n        while (packet.offset < end) {\n          type = packet.readInt8();\n          len = packet.readLengthCodedNumber();\n          stateEnd = packet.offset + len;\n          if (type === sessionInfoTypes.SYSTEM_VARIABLES) {\n            key = packet.readLengthCodedString(encoding);\n            const val = packet.readLengthCodedString(encoding);\n            stateChanges.systemVariables[key] = val;\n            if (key === 'character_set_client') {\n              const charsetNumber = EncodingToCharset[val];\n              connection.config.charsetNumber = charsetNumber;\n            }\n          } else if (type === sessionInfoTypes.SCHEMA) {\n            key = packet.readLengthCodedString(encoding);\n            stateChanges.schema = key;\n          } else if (type === sessionInfoTypes.STATE_CHANGE) {\n            stateChanges.trackStateChange = packet.readLengthCodedString(\n              encoding\n            );\n          } else {\n            // unsupported session track type. For now just ignore\n          }\n          packet.offset = stateEnd;\n        }\n      }\n    } else {\n      this.info = packet.readString(undefined, encoding);\n    }\n    if (stateChanges) {\n      this.stateChanges = stateChanges;\n    }\n    const m = this.info.match(/\\schanged:\\s*(\\d+)/i);\n    if (m !== null) {\n      this.changedRows = parseInt(m[1], 10);\n    }\n  }\n\n  // TODO: should be consistent instance member, but it's just easier here to have just function\n  static toPacket(fieldCount, insertId) {\n    let length = 4 + Packet.lengthCodedNumberLength(fieldCount);\n    if (typeof insertId !== 'undefined') {\n      length += Packet.lengthCodedNumberLength(insertId);\n    }\n    const buffer = Buffer.allocUnsafe(length);\n    const packet = new Packet(0, buffer, 0, length);\n    packet.offset = 4;\n    packet.writeLengthCodedNumber(fieldCount);\n    if (typeof insertId !== 'undefined') {\n      packet.writeLengthCodedNumber(insertId);\n    }\n    return packet;\n  }\n}\n\nmodule.exports = ResultSetHeader;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}