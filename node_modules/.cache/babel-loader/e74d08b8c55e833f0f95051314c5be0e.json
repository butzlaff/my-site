{"ast":null,"code":"'use strict';\n\nconst Command = require('./command');\n\nconst Packets = require('../packets');\n\nconst eventParsers = [];\n\nclass BinlogEventHeader {\n  constructor(packet) {\n    this.timestamp = packet.readInt32();\n    this.eventType = packet.readInt8();\n    this.serverId = packet.readInt32();\n    this.eventSize = packet.readInt32();\n    this.logPos = packet.readInt32();\n    this.flags = packet.readInt16();\n  }\n\n}\n\nclass BinlogDump extends Command {\n  constructor(opts) {\n    super(); // this.onResult = callback;\n\n    this.opts = opts;\n  }\n\n  start(packet, connection) {\n    const newPacket = new Packets.BinlogDump(this.opts);\n    connection.writePacket(newPacket.toPacket(1));\n    return BinlogDump.prototype.binlogData;\n  }\n\n  binlogData(packet) {\n    // ok - continue consuming events\n    // error - error\n    // eof - end of binlog\n    if (packet.isEOF()) {\n      this.emit('eof');\n      return null;\n    } // binlog event header\n\n\n    packet.readInt8();\n    const header = new BinlogEventHeader(packet);\n    const EventParser = eventParsers[header.eventType];\n    let event;\n\n    if (EventParser) {\n      event = new EventParser(packet);\n    } else {\n      event = {\n        name: 'UNKNOWN'\n      };\n    }\n\n    event.header = header;\n    this.emit('event', event);\n    return BinlogDump.prototype.binlogData;\n  }\n\n}\n\nclass RotateEvent {\n  constructor(packet) {\n    this.pposition = packet.readInt32(); // TODO: read uint64 here\n\n    packet.readInt32(); // positionDword2\n\n    this.nextBinlog = packet.readString();\n    this.name = 'RotateEvent';\n  }\n\n}\n\nclass FormatDescriptionEvent {\n  constructor(packet) {\n    this.binlogVersion = packet.readInt16();\n    this.serverVersion = packet.readString(50).replace(/\\u0000.*/, ''); // eslint-disable-line no-control-regex\n\n    this.createTimestamp = packet.readInt32();\n    this.eventHeaderLength = packet.readInt8(); // should be 19\n\n    this.eventsLength = packet.readBuffer();\n    this.name = 'FormatDescriptionEvent';\n  }\n\n}\n\nclass QueryEvent {\n  constructor(packet) {\n    const parseStatusVars = require('../packets/binlog_query_statusvars.js');\n\n    this.slaveProxyId = packet.readInt32();\n    this.executionTime = packet.readInt32();\n    const schemaLength = packet.readInt8();\n    this.errorCode = packet.readInt16();\n    const statusVarsLength = packet.readInt16();\n    const statusVars = packet.readBuffer(statusVarsLength);\n    this.schema = packet.readString(schemaLength);\n    packet.readInt8(); // should be zero\n\n    this.statusVars = parseStatusVars(statusVars);\n    this.query = packet.readString();\n    this.name = 'QueryEvent';\n  }\n\n}\n\nclass XidEvent {\n  constructor(packet) {\n    this.binlogVersion = packet.readInt16();\n    this.xid = packet.readInt64();\n    this.name = 'XidEvent';\n  }\n\n}\n\neventParsers[2] = QueryEvent;\neventParsers[4] = RotateEvent;\neventParsers[15] = FormatDescriptionEvent;\neventParsers[16] = XidEvent;\nmodule.exports = BinlogDump;","map":{"version":3,"names":["Command","require","Packets","eventParsers","BinlogEventHeader","constructor","packet","timestamp","readInt32","eventType","readInt8","serverId","eventSize","logPos","flags","readInt16","BinlogDump","opts","start","connection","newPacket","writePacket","toPacket","prototype","binlogData","isEOF","emit","header","EventParser","event","name","RotateEvent","pposition","nextBinlog","readString","FormatDescriptionEvent","binlogVersion","serverVersion","replace","createTimestamp","eventHeaderLength","eventsLength","readBuffer","QueryEvent","parseStatusVars","slaveProxyId","executionTime","schemaLength","errorCode","statusVarsLength","statusVars","schema","query","XidEvent","xid","readInt64","module","exports"],"sources":["/home/emilio/√Årea de Trabalho/OneBitCode-aulas/REACT/site-react-login-live/react-controlledForms/node_modules/mysql2/lib/commands/binlog_dump.js"],"sourcesContent":["'use strict';\n\nconst Command = require('./command');\nconst Packets = require('../packets');\n\nconst eventParsers = [];\n\nclass BinlogEventHeader {\n  constructor(packet) {\n    this.timestamp = packet.readInt32();\n    this.eventType = packet.readInt8();\n    this.serverId = packet.readInt32();\n    this.eventSize = packet.readInt32();\n    this.logPos = packet.readInt32();\n    this.flags = packet.readInt16();\n  }\n}\n\nclass BinlogDump extends Command {\n  constructor(opts) {\n    super();\n    // this.onResult = callback;\n    this.opts = opts;\n  }\n\n  start(packet, connection) {\n    const newPacket = new Packets.BinlogDump(this.opts);\n    connection.writePacket(newPacket.toPacket(1));\n    return BinlogDump.prototype.binlogData;\n  }\n\n  binlogData(packet) {\n    // ok - continue consuming events\n    // error - error\n    // eof - end of binlog\n    if (packet.isEOF()) {\n      this.emit('eof');\n      return null;\n    }\n    // binlog event header\n    packet.readInt8();\n    const header = new BinlogEventHeader(packet);\n    const EventParser = eventParsers[header.eventType];\n    let event;\n    if (EventParser) {\n      event = new EventParser(packet);\n    } else {\n      event = {\n        name: 'UNKNOWN'\n      };\n    }\n    event.header = header;\n    this.emit('event', event);\n    return BinlogDump.prototype.binlogData;\n  }\n}\n\nclass RotateEvent {\n  constructor(packet) {\n    this.pposition = packet.readInt32();\n    // TODO: read uint64 here\n    packet.readInt32(); // positionDword2\n    this.nextBinlog = packet.readString();\n    this.name = 'RotateEvent';\n  }\n}\n\nclass FormatDescriptionEvent {\n  constructor(packet) {\n    this.binlogVersion = packet.readInt16();\n    this.serverVersion = packet.readString(50).replace(/\\u0000.*/, ''); // eslint-disable-line no-control-regex\n    this.createTimestamp = packet.readInt32();\n    this.eventHeaderLength = packet.readInt8(); // should be 19\n    this.eventsLength = packet.readBuffer();\n    this.name = 'FormatDescriptionEvent';\n  }\n}\n\nclass QueryEvent {\n  constructor(packet) {\n    const parseStatusVars = require('../packets/binlog_query_statusvars.js');\n    this.slaveProxyId = packet.readInt32();\n    this.executionTime = packet.readInt32();\n    const schemaLength = packet.readInt8();\n    this.errorCode = packet.readInt16();\n    const statusVarsLength = packet.readInt16();\n    const statusVars = packet.readBuffer(statusVarsLength);\n    this.schema = packet.readString(schemaLength);\n    packet.readInt8(); // should be zero\n    this.statusVars = parseStatusVars(statusVars);\n    this.query = packet.readString();\n    this.name = 'QueryEvent';\n  }\n}\n\nclass XidEvent {\n  constructor(packet) {\n    this.binlogVersion = packet.readInt16();\n    this.xid = packet.readInt64();\n    this.name = 'XidEvent';\n  }\n}\n\neventParsers[2] = QueryEvent;\neventParsers[4] = RotateEvent;\neventParsers[15] = FormatDescriptionEvent;\neventParsers[16] = XidEvent;\n\nmodule.exports = BinlogDump;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}