{"ast":null,"code":"'use strict'; // http://dev.mysql.com/doc/internals/en/query-event.html\n\nconst keys = {\n  FLAGS2: 0,\n  SQL_MODE: 1,\n  CATALOG: 2,\n  AUTO_INCREMENT: 3,\n  CHARSET: 4,\n  TIME_ZONE: 5,\n  CATALOG_NZ: 6,\n  LC_TIME_NAMES: 7,\n  CHARSET_DATABASE: 8,\n  TABLE_MAP_FOR_UPDATE: 9,\n  MASTER_DATA_WRITTEN: 10,\n  INVOKERS: 11,\n  UPDATED_DB_NAMES: 12,\n  MICROSECONDS: 3\n};\n\nmodule.exports = function parseStatusVars(buffer) {\n  const result = {};\n  let offset = 0;\n  let key, length, prevOffset;\n\n  while (offset < buffer.length) {\n    key = buffer[offset++];\n\n    switch (key) {\n      case keys.FLAGS2:\n        result.flags = buffer.readUInt32LE(offset);\n        offset += 4;\n        break;\n\n      case keys.SQL_MODE:\n        // value is 8 bytes, but all dcumented flags are in first 4 bytes\n        result.sqlMode = buffer.readUInt32LE(offset);\n        offset += 8;\n        break;\n\n      case keys.CATALOG:\n        length = buffer[offset++];\n        result.catalog = buffer.toString('utf8', offset, offset + length);\n        offset += length + 1; // null byte after string\n\n        break;\n\n      case keys.CHARSET:\n        result.clientCharset = buffer.readUInt16LE(offset);\n        result.connectionCollation = buffer.readUInt16LE(offset + 2);\n        result.serverCharset = buffer.readUInt16LE(offset + 4);\n        offset += 6;\n        break;\n\n      case keys.TIME_ZONE:\n        length = buffer[offset++];\n        result.timeZone = buffer.toString('utf8', offset, offset + length);\n        offset += length; // no null byte\n\n        break;\n\n      case keys.CATALOG_NZ:\n        length = buffer[offset++];\n        result.catalogNz = buffer.toString('utf8', offset, offset + length);\n        offset += length; // no null byte\n\n        break;\n\n      case keys.LC_TIME_NAMES:\n        result.lcTimeNames = buffer.readUInt16LE(offset);\n        offset += 2;\n        break;\n\n      case keys.CHARSET_DATABASE:\n        result.schemaCharset = buffer.readUInt16LE(offset);\n        offset += 2;\n        break;\n\n      case keys.TABLE_MAP_FOR_UPDATE:\n        result.mapForUpdate1 = buffer.readUInt32LE(offset);\n        result.mapForUpdate2 = buffer.readUInt32LE(offset + 4);\n        offset += 8;\n        break;\n\n      case keys.MASTER_DATA_WRITTEN:\n        result.masterDataWritten = buffer.readUInt32LE(offset);\n        offset += 4;\n        break;\n\n      case keys.INVOKERS:\n        length = buffer[offset++];\n        result.invokerUsername = buffer.toString('utf8', offset, offset + length);\n        offset += length;\n        length = buffer[offset++];\n        result.invokerHostname = buffer.toString('utf8', offset, offset + length);\n        offset += length;\n        break;\n\n      case keys.UPDATED_DB_NAMES:\n        length = buffer[offset++]; // length - number of null-terminated strings\n\n        result.updatedDBs = []; // we'll store them as array here\n\n        for (; length; --length) {\n          prevOffset = offset; // fast forward to null terminating byte\n\n          while (buffer[offset++] && offset < buffer.length) {// empty body, everything inside while condition\n          }\n\n          result.updatedDBs.push(buffer.toString('utf8', prevOffset, offset - 1));\n        }\n\n        break;\n\n      case keys.MICROSECONDS:\n        result.microseconds = // REVIEW: INVALID UNKNOWN VARIABLE!\n        buffer.readInt16LE(offset) + (buffer[offset + 2] << 16);\n        offset += 3;\n    }\n  }\n\n  return result;\n};","map":{"version":3,"names":["keys","FLAGS2","SQL_MODE","CATALOG","AUTO_INCREMENT","CHARSET","TIME_ZONE","CATALOG_NZ","LC_TIME_NAMES","CHARSET_DATABASE","TABLE_MAP_FOR_UPDATE","MASTER_DATA_WRITTEN","INVOKERS","UPDATED_DB_NAMES","MICROSECONDS","module","exports","parseStatusVars","buffer","result","offset","key","length","prevOffset","flags","readUInt32LE","sqlMode","catalog","toString","clientCharset","readUInt16LE","connectionCollation","serverCharset","timeZone","catalogNz","lcTimeNames","schemaCharset","mapForUpdate1","mapForUpdate2","masterDataWritten","invokerUsername","invokerHostname","updatedDBs","push","microseconds","readInt16LE"],"sources":["/home/emilio/Área de Trabalho/OneBitCode-aulas/REACT/site-react-login-live/react-controlledForms/node_modules/mysql2/lib/packets/binlog_query_statusvars.js"],"sourcesContent":["'use strict';\n\n// http://dev.mysql.com/doc/internals/en/query-event.html\n\nconst keys = {\n  FLAGS2: 0,\n  SQL_MODE: 1,\n  CATALOG: 2,\n  AUTO_INCREMENT: 3,\n  CHARSET: 4,\n  TIME_ZONE: 5,\n  CATALOG_NZ: 6,\n  LC_TIME_NAMES: 7,\n  CHARSET_DATABASE: 8,\n  TABLE_MAP_FOR_UPDATE: 9,\n  MASTER_DATA_WRITTEN: 10,\n  INVOKERS: 11,\n  UPDATED_DB_NAMES: 12,\n  MICROSECONDS: 3\n};\n\nmodule.exports = function parseStatusVars(buffer) {\n  const result = {};\n  let offset = 0;\n  let key, length, prevOffset;\n  while (offset < buffer.length) {\n    key = buffer[offset++];\n    switch (key) {\n      case keys.FLAGS2:\n        result.flags = buffer.readUInt32LE(offset);\n        offset += 4;\n        break;\n      case keys.SQL_MODE:\n        // value is 8 bytes, but all dcumented flags are in first 4 bytes\n        result.sqlMode = buffer.readUInt32LE(offset);\n        offset += 8;\n        break;\n      case keys.CATALOG:\n        length = buffer[offset++];\n        result.catalog = buffer.toString('utf8', offset, offset + length);\n        offset += length + 1; // null byte after string\n        break;\n      case keys.CHARSET:\n        result.clientCharset = buffer.readUInt16LE(offset);\n        result.connectionCollation = buffer.readUInt16LE(offset + 2);\n        result.serverCharset = buffer.readUInt16LE(offset + 4);\n        offset += 6;\n        break;\n      case keys.TIME_ZONE:\n        length = buffer[offset++];\n        result.timeZone = buffer.toString('utf8', offset, offset + length);\n        offset += length; // no null byte\n        break;\n      case keys.CATALOG_NZ:\n        length = buffer[offset++];\n        result.catalogNz = buffer.toString('utf8', offset, offset + length);\n        offset += length; // no null byte\n        break;\n      case keys.LC_TIME_NAMES:\n        result.lcTimeNames = buffer.readUInt16LE(offset);\n        offset += 2;\n        break;\n      case keys.CHARSET_DATABASE:\n        result.schemaCharset = buffer.readUInt16LE(offset);\n        offset += 2;\n        break;\n      case keys.TABLE_MAP_FOR_UPDATE:\n        result.mapForUpdate1 = buffer.readUInt32LE(offset);\n        result.mapForUpdate2 = buffer.readUInt32LE(offset + 4);\n        offset += 8;\n        break;\n      case keys.MASTER_DATA_WRITTEN:\n        result.masterDataWritten = buffer.readUInt32LE(offset);\n        offset += 4;\n        break;\n      case keys.INVOKERS:\n        length = buffer[offset++];\n        result.invokerUsername = buffer.toString(\n          'utf8',\n          offset,\n          offset + length\n        );\n        offset += length;\n        length = buffer[offset++];\n        result.invokerHostname = buffer.toString(\n          'utf8',\n          offset,\n          offset + length\n        );\n        offset += length;\n        break;\n      case keys.UPDATED_DB_NAMES:\n        length = buffer[offset++];\n        // length - number of null-terminated strings\n        result.updatedDBs = []; // we'll store them as array here\n        for (; length; --length) {\n          prevOffset = offset;\n          // fast forward to null terminating byte\n          while (buffer[offset++] && offset < buffer.length) {\n            // empty body, everything inside while condition\n          }\n          result.updatedDBs.push(\n            buffer.toString('utf8', prevOffset, offset - 1)\n          );\n        }\n        break;\n      case keys.MICROSECONDS:\n        result.microseconds =\n          // REVIEW: INVALID UNKNOWN VARIABLE!\n          buffer.readInt16LE(offset) + (buffer[offset + 2] << 16);\n        offset += 3;\n    }\n  }\n  return result;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}