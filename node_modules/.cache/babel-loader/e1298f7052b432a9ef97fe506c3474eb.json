{"ast":null,"code":"'use strict';\n\nconst Types = require('../constants/types');\n\nconst Packet = require('../packets/packet');\n\nconst binaryReader = new Array(256);\n\nclass BinaryRow {\n  constructor(columns) {\n    this.columns = columns || [];\n  }\n\n  toPacket() {\n    throw new Error('Not implemented');\n  } // TODO: complete list of types...\n\n\n  static fromPacket(fields, packet) {\n    const columns = new Array(fields.length);\n    packet.readInt8(); // TODO check it's 0\n\n    const nullBitmapLength = Math.floor((fields.length + 7 + 2) / 8); // TODO: read and interpret null bitmap\n\n    packet.skip(nullBitmapLength);\n\n    for (let i = 0; i < columns.length; ++i) {\n      columns[i] = binaryReader[fields[i].columnType].apply(packet);\n    }\n\n    return new BinaryRow(columns);\n  }\n\n} // TODO: replace with constants.MYSQL_TYPE_*\n\n\nbinaryReader[Types.DECIMAL] = Packet.prototype.readLengthCodedString;\nbinaryReader[1] = Packet.prototype.readInt8; // tiny\n\nbinaryReader[2] = Packet.prototype.readInt16; // short\n\nbinaryReader[3] = Packet.prototype.readInt32; // long\n\nbinaryReader[4] = Packet.prototype.readFloat; // float\n\nbinaryReader[5] = Packet.prototype.readDouble; // double\n\nbinaryReader[6] = Packet.prototype.assertInvalid; // null, should be skipped vie null bitmap\n\nbinaryReader[7] = Packet.prototype.readTimestamp; // timestamp, http://dev.mysql.com/doc/internals/en/prepared-statements.html#packet-ProtocolBinary::MYSQL_TYPE_TIMESTAMP\n\nbinaryReader[8] = Packet.prototype.readInt64; // long long\n\nbinaryReader[9] = Packet.prototype.readInt32; // int24\n\nbinaryReader[10] = Packet.prototype.readTimestamp; // date\n\nbinaryReader[11] = Packet.prototype.readTime; // time, http://dev.mysql.com/doc/internals/en/prepared-statements.html#packet-ProtocolBinary::MYSQL_TYPE_TIME\n\nbinaryReader[12] = Packet.prototype.readDateTime; // datetime, http://dev.mysql.com/doc/internals/en/prepared-statements.html#packet-ProtocolBinary::MYSQL_TYPE_DATETIME\n\nbinaryReader[13] = Packet.prototype.readInt16; // year\n\nbinaryReader[Types.VAR_STRING] = Packet.prototype.readLengthCodedString; // var string\n\nmodule.exports = BinaryRow;","map":{"version":3,"names":["Types","require","Packet","binaryReader","Array","BinaryRow","constructor","columns","toPacket","Error","fromPacket","fields","packet","length","readInt8","nullBitmapLength","Math","floor","skip","i","columnType","apply","DECIMAL","prototype","readLengthCodedString","readInt16","readInt32","readFloat","readDouble","assertInvalid","readTimestamp","readInt64","readTime","readDateTime","VAR_STRING","module","exports"],"sources":["/home/emilio/Área de Trabalho/OneBitCode-aulas/REACT/site-react-login-live/react-controlledForms/node_modules/mysql2/lib/packets/binary_row.js"],"sourcesContent":["'use strict';\n\nconst Types = require('../constants/types');\nconst Packet = require('../packets/packet');\n\nconst binaryReader = new Array(256);\n\nclass BinaryRow {\n  constructor(columns) {\n    this.columns = columns || [];\n  }\n\n  toPacket() {\n    throw new Error('Not implemented');\n  }\n\n  // TODO: complete list of types...\n  static fromPacket(fields, packet) {\n    const columns = new Array(fields.length);\n    packet.readInt8(); // TODO check it's 0\n    const nullBitmapLength = Math.floor((fields.length + 7 + 2) / 8);\n    // TODO: read and interpret null bitmap\n    packet.skip(nullBitmapLength);\n    for (let i = 0; i < columns.length; ++i) {\n      columns[i] = binaryReader[fields[i].columnType].apply(packet);\n    }\n    return new BinaryRow(columns);\n  }\n}\n\n// TODO: replace with constants.MYSQL_TYPE_*\nbinaryReader[Types.DECIMAL] = Packet.prototype.readLengthCodedString;\nbinaryReader[1] = Packet.prototype.readInt8; // tiny\nbinaryReader[2] = Packet.prototype.readInt16; // short\nbinaryReader[3] = Packet.prototype.readInt32; // long\nbinaryReader[4] = Packet.prototype.readFloat; // float\nbinaryReader[5] = Packet.prototype.readDouble; // double\nbinaryReader[6] = Packet.prototype.assertInvalid; // null, should be skipped vie null bitmap\nbinaryReader[7] = Packet.prototype.readTimestamp; // timestamp, http://dev.mysql.com/doc/internals/en/prepared-statements.html#packet-ProtocolBinary::MYSQL_TYPE_TIMESTAMP\nbinaryReader[8] = Packet.prototype.readInt64; // long long\nbinaryReader[9] = Packet.prototype.readInt32; // int24\nbinaryReader[10] = Packet.prototype.readTimestamp; // date\nbinaryReader[11] = Packet.prototype.readTime; // time, http://dev.mysql.com/doc/internals/en/prepared-statements.html#packet-ProtocolBinary::MYSQL_TYPE_TIME\nbinaryReader[12] = Packet.prototype.readDateTime; // datetime, http://dev.mysql.com/doc/internals/en/prepared-statements.html#packet-ProtocolBinary::MYSQL_TYPE_DATETIME\nbinaryReader[13] = Packet.prototype.readInt16; // year\nbinaryReader[Types.VAR_STRING] = Packet.prototype.readLengthCodedString; // var string\n\nmodule.exports = BinaryRow;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}