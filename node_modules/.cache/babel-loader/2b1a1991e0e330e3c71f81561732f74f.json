{"ast":null,"code":"// This file was modified by Oracle on June 1, 2021.\n// The changes involve new logic to handle an additional ERR Packet sent by\n// the MySQL server when the connection is closed unexpectedly.\n// Modifications copyright (c) 2021, Oracle and/or its affiliates.\n// This file was modified by Oracle on June 17, 2021.\n// The changes involve logic to ensure the socket connection is closed when\n// there is a fatal error.\n// Modifications copyright (c) 2021, Oracle and/or its affiliates.\n'use strict';\n\nconst Net = require('net');\n\nconst Tls = require('tls');\n\nconst Timers = require('timers');\n\nconst EventEmitter = require('events').EventEmitter;\n\nconst Readable = require('stream').Readable;\n\nconst Queue = require('denque');\n\nconst SqlString = require('sqlstring');\n\nconst LRU = require('lru-cache');\n\nconst PacketParser = require('./packet_parser.js');\n\nconst Packets = require('./packets/index.js');\n\nconst Commands = require('./commands/index.js');\n\nconst ConnectionConfig = require('./connection_config.js');\n\nconst CharsetToEncoding = require('./constants/charset_encodings.js');\n\nlet _connectionId = 0;\nlet convertNamedPlaceholders = null;\n\nclass Connection extends EventEmitter {\n  constructor(opts) {\n    super();\n    this.config = opts.config; // TODO: fill defaults\n    // if no params, connect to /var/lib/mysql/mysql.sock ( /tmp/mysql.sock on OSX )\n    // if host is given, connect to host:3306\n    // TODO: use `/usr/local/mysql/bin/mysql_config --socket` output? as default socketPath\n    // if there is no host/port and no socketPath parameters?\n\n    if (!opts.config.stream) {\n      if (opts.config.socketPath) {\n        this.stream = Net.connect(opts.config.socketPath);\n      } else {\n        this.stream = Net.connect(opts.config.port, opts.config.host); // Enable keep-alive on the socket.  It's disabled by default, but the\n        // user can enable it and supply an initial delay.\n\n        this.stream.setKeepAlive(true, this.config.keepAliveInitialDelay);\n      } // if stream is a function, treat it as \"stream agent / factory\"\n\n    } else if (typeof opts.config.stream === 'function') {\n      this.stream = opts.config.stream(opts);\n    } else {\n      this.stream = opts.config.stream;\n    }\n\n    this._internalId = _connectionId++;\n    this._commands = new Queue();\n    this._command = null;\n    this._paused = false;\n    this._paused_packets = new Queue();\n    this._statements = new LRU({\n      max: this.config.maxPreparedStatements,\n      dispose: function (key, statement) {\n        statement.close();\n      }\n    });\n    this.serverCapabilityFlags = 0;\n    this.authorized = false;\n    this.sequenceId = 0;\n    this.compressedSequenceId = 0;\n    this.threadId = null;\n    this._handshakePacket = null;\n    this._fatalError = null;\n    this._protocolError = null;\n    this._outOfOrderPackets = [];\n    this.clientEncoding = CharsetToEncoding[this.config.charsetNumber];\n    this.stream.on('error', this._handleNetworkError.bind(this)); // see https://gist.github.com/khoomeister/4985691#use-that-instead-of-bind\n\n    this.packetParser = new PacketParser(p => {\n      this.handlePacket(p);\n    });\n    this.stream.on('data', data => {\n      if (this.connectTimeout) {\n        Timers.clearTimeout(this.connectTimeout);\n        this.connectTimeout = null;\n      }\n\n      this.packetParser.execute(data);\n    });\n    this.stream.on('close', () => {\n      // we need to set this flag everywhere where we want connection to close\n      if (this._closing) {\n        return;\n      }\n\n      if (!this._protocolError) {\n        // no particular error message before disconnect\n        this._protocolError = new Error('Connection lost: The server closed the connection.');\n        this._protocolError.fatal = true;\n        this._protocolError.code = 'PROTOCOL_CONNECTION_LOST';\n      }\n\n      this._notifyError(this._protocolError);\n    });\n    let handshakeCommand;\n\n    if (!this.config.isServer) {\n      handshakeCommand = new Commands.ClientHandshake(this.config.clientFlags);\n      handshakeCommand.on('end', () => {\n        // this happens when handshake finishes early either because there was\n        // some fatal error or the server sent an error packet instead of\n        // an hello packet (for example, 'Too many connactions' error)\n        if (!handshakeCommand.handshake || this._fatalError || this._protocolError) {\n          return;\n        }\n\n        this._handshakePacket = handshakeCommand.handshake;\n        this.threadId = handshakeCommand.handshake.connectionId;\n        this.emit('connect', handshakeCommand.handshake);\n      });\n      handshakeCommand.on('error', err => {\n        this._closing = true;\n\n        this._notifyError(err);\n      });\n      this.addCommand(handshakeCommand);\n    } // in case there was no initiall handshake but we need to read sting, assume it utf-8\n    // most common example: \"Too many connections\" error ( packet is sent immediately on connection attempt, we don't know server encoding yet)\n    // will be overwrittedn with actial encoding value as soon as server handshake packet is received\n\n\n    this.serverEncoding = 'utf8';\n\n    if (this.config.connectTimeout) {\n      const timeoutHandler = this._handleTimeoutError.bind(this);\n\n      this.connectTimeout = Timers.setTimeout(timeoutHandler, this.config.connectTimeout);\n    }\n  }\n\n  promise(promiseImpl) {\n    const PromiseConnection = require('../promise').PromiseConnection;\n\n    return new PromiseConnection(this, promiseImpl);\n  }\n\n  _addCommandClosedState(cmd) {\n    const err = new Error(\"Can't add new command when connection is in closed state\");\n    err.fatal = true;\n\n    if (cmd.onResult) {\n      cmd.onResult(err);\n    } else {\n      this.emit('error', err);\n    }\n  }\n\n  _handleFatalError(err) {\n    err.fatal = true; // stop receiving packets\n\n    this.stream.removeAllListeners('data');\n    this.addCommand = this._addCommandClosedState;\n\n    this.write = () => {\n      this.emit('error', new Error(\"Can't write in closed state\"));\n    };\n\n    this._notifyError(err);\n\n    this._fatalError = err;\n  }\n\n  _handleNetworkError(err) {\n    if (this.connectTimeout) {\n      Timers.clearTimeout(this.connectTimeout);\n      this.connectTimeout = null;\n    } // Do not throw an error when a connection ends with a RST,ACK packet\n\n\n    if (err.errno === 'ECONNRESET' && this._closing) {\n      return;\n    }\n\n    this._handleFatalError(err);\n  }\n\n  _handleTimeoutError() {\n    if (this.connectTimeout) {\n      Timers.clearTimeout(this.connectTimeout);\n      this.connectTimeout = null;\n    }\n\n    this.stream.destroy && this.stream.destroy();\n    const err = new Error('connect ETIMEDOUT');\n    err.errorno = 'ETIMEDOUT';\n    err.code = 'ETIMEDOUT';\n    err.syscall = 'connect';\n\n    this._handleNetworkError(err);\n  } // notify all commands in the queue and bubble error as connection \"error\"\n  // called on stream error or unexpected termination\n\n\n  _notifyError(err) {\n    if (this.connectTimeout) {\n      Timers.clearTimeout(this.connectTimeout);\n      this.connectTimeout = null;\n    } // prevent from emitting 'PROTOCOL_CONNECTION_LOST' after EPIPE or ECONNRESET\n\n\n    if (this._fatalError) {\n      return;\n    }\n\n    let command; // if there is no active command, notify connection\n    // if there are commands and all of them have callbacks, pass error via callback\n\n    let bubbleErrorToConnection = !this._command;\n\n    if (this._command && this._command.onResult) {\n      this._command.onResult(err);\n\n      this._command = null; // connection handshake is special because we allow it to be implicit\n      // if error happened during handshake, but there are others commands in queue\n      // then bubble error to other commands and not to connection\n    } else if (!(this._command && this._command.constructor === Commands.ClientHandshake && this._commands.length > 0)) {\n      bubbleErrorToConnection = true;\n    }\n\n    while (command = this._commands.shift()) {\n      if (command.onResult) {\n        command.onResult(err);\n      } else {\n        bubbleErrorToConnection = true;\n      }\n    } // notify connection if some comands in the queue did not have callbacks\n    // or if this is pool connection ( so it can be removed from pool )\n\n\n    if (bubbleErrorToConnection || this._pool) {\n      this.emit('error', err);\n    } // close connection after emitting the event in case of a fatal error\n\n\n    if (err.fatal) {\n      this.close();\n    }\n  }\n\n  write(buffer) {\n    const result = this.stream.write(buffer, err => {\n      if (err) {\n        this._handleNetworkError(err);\n      }\n    });\n\n    if (!result) {\n      this.stream.emit('pause');\n    }\n  } // http://dev.mysql.com/doc/internals/en/sequence-id.html\n  //\n  // The sequence-id is incremented with each packet and may wrap around.\n  // It starts at 0 and is reset to 0 when a new command\n  // begins in the Command Phase.\n  // http://dev.mysql.com/doc/internals/en/example-several-mysql-packets.html\n\n\n  _resetSequenceId() {\n    this.sequenceId = 0;\n    this.compressedSequenceId = 0;\n  }\n\n  _bumpCompressedSequenceId(numPackets) {\n    this.compressedSequenceId += numPackets;\n    this.compressedSequenceId %= 256;\n  }\n\n  _bumpSequenceId(numPackets) {\n    this.sequenceId += numPackets;\n    this.sequenceId %= 256;\n  }\n\n  writePacket(packet) {\n    const MAX_PACKET_LENGTH = 16777215;\n    const length = packet.length();\n    let chunk, offset, header;\n\n    if (length < MAX_PACKET_LENGTH) {\n      packet.writeHeader(this.sequenceId);\n\n      if (this.config.debug) {\n        // eslint-disable-next-line no-console\n        console.log(`${this._internalId} ${this.connectionId} <== ${this._command._commandName}#${this._command.stateName()}(${[this.sequenceId, packet._name, packet.length()].join(',')})`); // eslint-disable-next-line no-console\n\n        console.log(`${this._internalId} ${this.connectionId} <== ${packet.buffer.toString('hex')}`);\n      }\n\n      this._bumpSequenceId(1);\n\n      this.write(packet.buffer);\n    } else {\n      if (this.config.debug) {\n        // eslint-disable-next-line no-console\n        console.log(`${this._internalId} ${this.connectionId} <== Writing large packet, raw content not written:`); // eslint-disable-next-line no-console\n\n        console.log(`${this._internalId} ${this.connectionId} <== ${this._command._commandName}#${this._command.stateName()}(${[this.sequenceId, packet._name, packet.length()].join(',')})`);\n      }\n\n      for (offset = 4; offset < 4 + length; offset += MAX_PACKET_LENGTH) {\n        chunk = packet.buffer.slice(offset, offset + MAX_PACKET_LENGTH);\n\n        if (chunk.length === MAX_PACKET_LENGTH) {\n          header = Buffer.from([0xff, 0xff, 0xff, this.sequenceId]);\n        } else {\n          header = Buffer.from([chunk.length & 0xff, chunk.length >> 8 & 0xff, chunk.length >> 16 & 0xff, this.sequenceId]);\n        }\n\n        this._bumpSequenceId(1);\n\n        this.write(header);\n        this.write(chunk);\n      }\n    }\n  } // 0.11+ environment\n\n\n  startTLS(onSecure) {\n    if (this.config.debug) {\n      // eslint-disable-next-line no-console\n      console.log('Upgrading connection to TLS');\n    }\n\n    const secureContext = Tls.createSecureContext({\n      ca: this.config.ssl.ca,\n      cert: this.config.ssl.cert,\n      ciphers: this.config.ssl.ciphers,\n      key: this.config.ssl.key,\n      passphrase: this.config.ssl.passphrase,\n      minVersion: this.config.ssl.minVersion\n    });\n    const rejectUnauthorized = this.config.ssl.rejectUnauthorized;\n    let secureEstablished = false;\n    const secureSocket = new Tls.TLSSocket(this.stream, {\n      rejectUnauthorized: rejectUnauthorized,\n      requestCert: true,\n      secureContext: secureContext,\n      isServer: false\n    }); // error handler for secure socket\n\n    secureSocket.on('_tlsError', err => {\n      if (secureEstablished) {\n        this._handleNetworkError(err);\n      } else {\n        onSecure(err);\n      }\n    });\n    secureSocket.on('secure', () => {\n      secureEstablished = true;\n      onSecure(rejectUnauthorized ? secureSocket.ssl.verifyError() : null);\n    });\n    secureSocket.on('data', data => {\n      this.packetParser.execute(data);\n    });\n\n    this.write = buffer => {\n      secureSocket.write(buffer);\n    }; // start TLS communications\n\n\n    secureSocket._start();\n  }\n\n  pipe() {\n    if (this.stream instanceof Net.Stream) {\n      this.stream.ondata = (data, start, end) => {\n        this.packetParser.execute(data, start, end);\n      };\n    } else {\n      this.stream.on('data', data => {\n        this.packetParser.execute(data.parent, data.offset, data.offset + data.length);\n      });\n    }\n  }\n\n  protocolError(message, code) {\n    // Starting with MySQL 8.0.24, if the client closes the connection\n    // unexpectedly, the server will send a last ERR Packet, which we can\n    // safely ignore.\n    // https://dev.mysql.com/worklog/task/?id=12999\n    if (this._closing) {\n      return;\n    }\n\n    const err = new Error(message);\n    err.fatal = true;\n    err.code = code || 'PROTOCOL_ERROR';\n    this.emit('error', err);\n  }\n\n  handlePacket(packet) {\n    if (this._paused) {\n      this._paused_packets.push(packet);\n\n      return;\n    }\n\n    if (packet) {\n      if (this.sequenceId !== packet.sequenceId) {\n        const err = new Error(`Warning: got packets out of order. Expected ${this.sequenceId} but received ${packet.sequenceId}`);\n        err.expected = this.sequenceId;\n        err.received = packet.sequenceId;\n        this.emit('warn', err); // REVIEW\n        // eslint-disable-next-line no-console\n\n        console.error(err.message);\n      }\n\n      this._bumpSequenceId(packet.numPackets);\n    }\n\n    if (this.config.debug) {\n      if (packet) {\n        // eslint-disable-next-line no-console\n        console.log(` raw: ${packet.buffer.slice(packet.offset, packet.offset + packet.length()).toString('hex')}`); // eslint-disable-next-line no-console\n\n        console.trace();\n        const commandName = this._command ? this._command._commandName : '(no command)';\n        const stateName = this._command ? this._command.stateName() : '(no command)'; // eslint-disable-next-line no-console\n\n        console.log(`${this._internalId} ${this.connectionId} ==> ${commandName}#${stateName}(${[packet.sequenceId, packet.type(), packet.length()].join(',')})`);\n      }\n    }\n\n    if (!this._command) {\n      const marker = packet.peekByte(); // If it's an Err Packet, we should use it.\n\n      if (marker === 0xff) {\n        const error = Packets.Error.fromPacket(packet);\n        this.protocolError(error.message, error.code);\n      } else {\n        // Otherwise, it means it's some other unexpected packet.\n        this.protocolError('Unexpected packet while no commands in the queue', 'PROTOCOL_UNEXPECTED_PACKET');\n      }\n\n      this.close();\n      return;\n    }\n\n    const done = this._command.execute(packet, this);\n\n    if (done) {\n      this._command = this._commands.shift();\n\n      if (this._command) {\n        this.sequenceId = 0;\n        this.compressedSequenceId = 0;\n        this.handlePacket();\n      }\n    }\n  }\n\n  addCommand(cmd) {\n    // this.compressedSequenceId = 0;\n    // this.sequenceId = 0;\n    if (this.config.debug) {\n      const commandName = cmd.constructor.name; // eslint-disable-next-line no-console\n\n      console.log(`Add command: ${commandName}`);\n      cmd._commandName = commandName;\n    }\n\n    if (!this._command) {\n      this._command = cmd;\n      this.handlePacket();\n    } else {\n      this._commands.push(cmd);\n    }\n\n    return cmd;\n  }\n\n  format(sql, values) {\n    if (typeof this.config.queryFormat === 'function') {\n      return this.config.queryFormat.call(this, sql, values, this.config.timezone);\n    }\n\n    const opts = {\n      sql: sql,\n      values: values\n    };\n\n    this._resolveNamedPlaceholders(opts);\n\n    return SqlString.format(opts.sql, opts.values, this.config.stringifyObjects, this.config.timezone);\n  }\n\n  escape(value) {\n    return SqlString.escape(value, false, this.config.timezone);\n  }\n\n  escapeId(value) {\n    return SqlString.escapeId(value, false);\n  }\n\n  raw(sql) {\n    return SqlString.raw(sql);\n  }\n\n  _resolveNamedPlaceholders(options) {\n    let unnamed;\n\n    if (this.config.namedPlaceholders || options.namedPlaceholders) {\n      if (Array.isArray(options.values)) {\n        // if an array is provided as the values, assume the conversion is not necessary.\n        // this allows the usage of unnamed placeholders even if the namedPlaceholders flag is enabled.\n        return;\n      }\n\n      if (convertNamedPlaceholders === null) {\n        convertNamedPlaceholders = require('named-placeholders')();\n      }\n\n      unnamed = convertNamedPlaceholders(options.sql, options.values);\n      options.sql = unnamed[0];\n      options.values = unnamed[1];\n    }\n  }\n\n  query(sql, values, cb) {\n    let cmdQuery;\n\n    if (sql.constructor === Commands.Query) {\n      cmdQuery = sql;\n    } else {\n      cmdQuery = Connection.createQuery(sql, values, cb, this.config);\n    }\n\n    this._resolveNamedPlaceholders(cmdQuery);\n\n    const rawSql = this.format(cmdQuery.sql, cmdQuery.values !== undefined ? cmdQuery.values : []);\n    cmdQuery.sql = rawSql;\n    return this.addCommand(cmdQuery);\n  }\n\n  pause() {\n    this._paused = true;\n    this.stream.pause();\n  }\n\n  resume() {\n    let packet;\n    this._paused = false;\n\n    while (packet = this._paused_packets.shift()) {\n      this.handlePacket(packet); // don't resume if packet hander paused connection\n\n      if (this._paused) {\n        return;\n      }\n    }\n\n    this.stream.resume();\n  } // TODO: named placeholders support\n\n\n  prepare(options, cb) {\n    if (typeof options === 'string') {\n      options = {\n        sql: options\n      };\n    }\n\n    return this.addCommand(new Commands.Prepare(options, cb));\n  }\n\n  unprepare(sql) {\n    let options = {};\n\n    if (typeof sql === 'object') {\n      options = sql;\n    } else {\n      options.sql = sql;\n    }\n\n    const key = Connection.statementKey(options);\n\n    const stmt = this._statements.get(key);\n\n    if (stmt) {\n      this._statements.del(key);\n\n      stmt.close();\n    }\n\n    return stmt;\n  }\n\n  execute(sql, values, cb) {\n    let options = {};\n\n    if (typeof sql === 'object') {\n      // execute(options, cb)\n      options = sql;\n\n      if (typeof values === 'function') {\n        cb = values;\n      } else {\n        options.values = options.values || values;\n      }\n    } else if (typeof values === 'function') {\n      // execute(sql, cb)\n      cb = values;\n      options.sql = sql;\n      options.values = undefined;\n    } else {\n      // execute(sql, values, cb)\n      options.sql = sql;\n      options.values = values;\n    }\n\n    this._resolveNamedPlaceholders(options); // check for values containing undefined\n\n\n    if (options.values) {\n      //If namedPlaceholder is not enabled and object is passed as bind parameters\n      if (!Array.isArray(options.values)) {\n        throw new TypeError('Bind parameters must be array if namedPlaceholders parameter is not enabled');\n      }\n\n      options.values.forEach(val => {\n        //If namedPlaceholder is not enabled and object is passed as bind parameters\n        if (!Array.isArray(options.values)) {\n          throw new TypeError('Bind parameters must be array if namedPlaceholders parameter is not enabled');\n        }\n\n        if (val === undefined) {\n          throw new TypeError('Bind parameters must not contain undefined. To pass SQL NULL specify JS null');\n        }\n\n        if (typeof val === 'function') {\n          throw new TypeError('Bind parameters must not contain function(s). To pass the body of a function as a string call .toString() first');\n        }\n      });\n    }\n\n    const executeCommand = new Commands.Execute(options, cb);\n    const prepareCommand = new Commands.Prepare(options, (err, stmt) => {\n      if (err) {\n        // skip execute command if prepare failed, we have main\n        // combined callback here\n        executeCommand.start = function () {\n          return null;\n        };\n\n        if (cb) {\n          cb(err);\n        } else {\n          executeCommand.emit('error', err);\n        }\n\n        executeCommand.emit('end');\n        return;\n      }\n\n      executeCommand.statement = stmt;\n    });\n    this.addCommand(prepareCommand);\n    this.addCommand(executeCommand);\n    return executeCommand;\n  }\n\n  changeUser(options, callback) {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    const charsetNumber = options.charset ? ConnectionConfig.getCharsetNumber(options.charset) : this.config.charsetNumber;\n    return this.addCommand(new Commands.ChangeUser({\n      user: options.user || this.config.user,\n      password: options.password || this.config.password,\n      passwordSha1: options.passwordSha1 || this.config.passwordSha1,\n      database: options.database || this.config.database,\n      timeout: options.timeout,\n      charsetNumber: charsetNumber,\n      currentConfig: this.config\n    }, err => {\n      if (err) {\n        err.fatal = true;\n      }\n\n      if (callback) {\n        callback(err);\n      }\n    }));\n  } // transaction helpers\n\n\n  beginTransaction(cb) {\n    return this.query('START TRANSACTION', cb);\n  }\n\n  commit(cb) {\n    return this.query('COMMIT', cb);\n  }\n\n  rollback(cb) {\n    return this.query('ROLLBACK', cb);\n  }\n\n  ping(cb) {\n    return this.addCommand(new Commands.Ping(cb));\n  }\n\n  _registerSlave(opts, cb) {\n    return this.addCommand(new Commands.RegisterSlave(opts, cb));\n  }\n\n  _binlogDump(opts, cb) {\n    return this.addCommand(new Commands.BinlogDump(opts, cb));\n  } // currently just alias to close\n\n\n  destroy() {\n    this.close();\n  }\n\n  close() {\n    if (this.connectTimeout) {\n      Timers.clearTimeout(this.connectTimeout);\n      this.connectTimeout = null;\n    }\n\n    this._closing = true;\n    this.stream.end();\n    this.addCommand = this._addCommandClosedState;\n  }\n\n  createBinlogStream(opts) {\n    // TODO: create proper stream class\n    // TODO: use through2\n    let test = 1;\n    const stream = new Readable({\n      objectMode: true\n    });\n\n    stream._read = function () {\n      return {\n        data: test++\n      };\n    };\n\n    this._registerSlave(opts, () => {\n      const dumpCmd = this._binlogDump(opts);\n\n      dumpCmd.on('event', ev => {\n        stream.push(ev);\n      });\n      dumpCmd.on('eof', () => {\n        stream.push(null); // if non-blocking, then close stream to prevent errors\n\n        if (opts.flags && opts.flags & 0x01) {\n          this.close();\n        }\n      }); // TODO: pipe errors as well\n    });\n\n    return stream;\n  }\n\n  connect(cb) {\n    if (!cb) {\n      return;\n    }\n\n    if (this._fatalError || this._protocolError) {\n      return cb(this._fatalError || this._protocolError);\n    }\n\n    if (this._handshakePacket) {\n      return cb(null, this);\n    }\n\n    let connectCalled = 0;\n\n    function callbackOnce(isErrorHandler) {\n      return function (param) {\n        if (!connectCalled) {\n          if (isErrorHandler) {\n            cb(param);\n          } else {\n            cb(null, param);\n          }\n        }\n\n        connectCalled = 1;\n      };\n    }\n\n    this.once('error', callbackOnce(true));\n    this.once('connect', callbackOnce(false));\n  } // ===================================\n  // outgoing server connection methods\n  // ===================================\n\n\n  writeColumns(columns) {\n    this.writePacket(Packets.ResultSetHeader.toPacket(columns.length));\n    columns.forEach(column => {\n      this.writePacket(Packets.ColumnDefinition.toPacket(column, this.serverConfig.encoding));\n    });\n    this.writeEof();\n  } // row is array of columns, not hash\n\n\n  writeTextRow(column) {\n    this.writePacket(Packets.TextRow.toPacket(column, this.serverConfig.encoding));\n  }\n\n  writeTextResult(rows, columns) {\n    this.writeColumns(columns);\n    rows.forEach(row => {\n      const arrayRow = new Array(columns.length);\n      columns.forEach(column => {\n        arrayRow.push(row[column.name]);\n      });\n      this.writeTextRow(arrayRow);\n    });\n    this.writeEof();\n  }\n\n  writeEof(warnings, statusFlags) {\n    this.writePacket(Packets.EOF.toPacket(warnings, statusFlags));\n  }\n\n  writeOk(args) {\n    if (!args) {\n      args = {\n        affectedRows: 0\n      };\n    }\n\n    this.writePacket(Packets.OK.toPacket(args, this.serverConfig.encoding));\n  }\n\n  writeError(args) {\n    // if we want to send error before initial hello was sent, use default encoding\n    const encoding = this.serverConfig ? this.serverConfig.encoding : 'cesu8';\n    this.writePacket(Packets.Error.toPacket(args, encoding));\n  }\n\n  serverHandshake(args) {\n    this.serverConfig = args;\n    this.serverConfig.encoding = CharsetToEncoding[this.serverConfig.characterSet];\n    return this.addCommand(new Commands.ServerHandshake(args));\n  } // ===============================================================\n\n\n  end(callback) {\n    if (this.config.isServer) {\n      this._closing = true;\n      const quitCmd = new EventEmitter();\n      setImmediate(() => {\n        this.stream.end();\n        quitCmd.emit('end');\n      });\n      return quitCmd;\n    } // trigger error if more commands enqueued after end command\n\n\n    const quitCmd = this.addCommand(new Commands.Quit(callback));\n    this.addCommand = this._addCommandClosedState;\n    return quitCmd;\n  }\n\n  static createQuery(sql, values, cb, config) {\n    let options = {\n      rowsAsArray: config.rowsAsArray\n    };\n\n    if (typeof sql === 'object') {\n      // query(options, cb)\n      options = sql;\n\n      if (typeof values === 'function') {\n        cb = values;\n      } else if (values !== undefined) {\n        options.values = values;\n      }\n    } else if (typeof values === 'function') {\n      // query(sql, cb)\n      cb = values;\n      options.sql = sql;\n      options.values = undefined;\n    } else {\n      // query(sql, values, cb)\n      options.sql = sql;\n      options.values = values;\n    }\n\n    return new Commands.Query(options, cb);\n  }\n\n  static statementKey(options) {\n    return `${typeof options.nestTables}/${options.nestTables}/${options.rowsAsArray}${options.sql}`;\n  }\n\n}\n\nif (Tls.TLSSocket) {// not supported\n} else {\n  Connection.prototype.startTLS = function _startTLS(onSecure) {\n    if (this.config.debug) {\n      // eslint-disable-next-line no-console\n      console.log('Upgrading connection to TLS');\n    }\n\n    const crypto = require('crypto');\n\n    const config = this.config;\n    const stream = this.stream;\n    const rejectUnauthorized = this.config.ssl.rejectUnauthorized;\n    const credentials = crypto.createCredentials({\n      key: config.ssl.key,\n      cert: config.ssl.cert,\n      passphrase: config.ssl.passphrase,\n      ca: config.ssl.ca,\n      ciphers: config.ssl.ciphers\n    });\n    const securePair = Tls.createSecurePair(credentials, false, true, rejectUnauthorized);\n\n    if (stream.ondata) {\n      stream.ondata = null;\n    }\n\n    stream.removeAllListeners('data');\n    stream.pipe(securePair.encrypted);\n    securePair.encrypted.pipe(stream);\n    securePair.cleartext.on('data', data => {\n      this.packetParser.execute(data);\n    });\n\n    this.write = function (buffer) {\n      securePair.cleartext.write(buffer);\n    };\n\n    securePair.on('secure', () => {\n      onSecure(rejectUnauthorized ? securePair.ssl.verifyError() : null);\n    });\n  };\n}\n\nmodule.exports = Connection;","map":{"version":3,"names":["Net","require","Tls","Timers","EventEmitter","Readable","Queue","SqlString","LRU","PacketParser","Packets","Commands","ConnectionConfig","CharsetToEncoding","_connectionId","convertNamedPlaceholders","Connection","constructor","opts","config","stream","socketPath","connect","port","host","setKeepAlive","keepAliveInitialDelay","_internalId","_commands","_command","_paused","_paused_packets","_statements","max","maxPreparedStatements","dispose","key","statement","close","serverCapabilityFlags","authorized","sequenceId","compressedSequenceId","threadId","_handshakePacket","_fatalError","_protocolError","_outOfOrderPackets","clientEncoding","charsetNumber","on","_handleNetworkError","bind","packetParser","p","handlePacket","data","connectTimeout","clearTimeout","execute","_closing","Error","fatal","code","_notifyError","handshakeCommand","isServer","ClientHandshake","clientFlags","handshake","connectionId","emit","err","addCommand","serverEncoding","timeoutHandler","_handleTimeoutError","setTimeout","promise","promiseImpl","PromiseConnection","_addCommandClosedState","cmd","onResult","_handleFatalError","removeAllListeners","write","errno","destroy","errorno","syscall","command","bubbleErrorToConnection","length","shift","_pool","buffer","result","_resetSequenceId","_bumpCompressedSequenceId","numPackets","_bumpSequenceId","writePacket","packet","MAX_PACKET_LENGTH","chunk","offset","header","writeHeader","debug","console","log","_commandName","stateName","_name","join","toString","slice","Buffer","from","startTLS","onSecure","secureContext","createSecureContext","ca","ssl","cert","ciphers","passphrase","minVersion","rejectUnauthorized","secureEstablished","secureSocket","TLSSocket","requestCert","verifyError","_start","pipe","Stream","ondata","start","end","parent","protocolError","message","push","expected","received","error","trace","commandName","type","marker","peekByte","fromPacket","done","name","format","sql","values","queryFormat","call","timezone","_resolveNamedPlaceholders","stringifyObjects","escape","value","escapeId","raw","options","unnamed","namedPlaceholders","Array","isArray","query","cb","cmdQuery","Query","createQuery","rawSql","undefined","pause","resume","prepare","Prepare","unprepare","statementKey","stmt","get","del","TypeError","forEach","val","executeCommand","Execute","prepareCommand","changeUser","callback","charset","getCharsetNumber","ChangeUser","user","password","passwordSha1","database","timeout","currentConfig","beginTransaction","commit","rollback","ping","Ping","_registerSlave","RegisterSlave","_binlogDump","BinlogDump","createBinlogStream","test","objectMode","_read","dumpCmd","ev","flags","connectCalled","callbackOnce","isErrorHandler","param","once","writeColumns","columns","ResultSetHeader","toPacket","column","ColumnDefinition","serverConfig","encoding","writeEof","writeTextRow","TextRow","writeTextResult","rows","row","arrayRow","warnings","statusFlags","EOF","writeOk","args","affectedRows","OK","writeError","serverHandshake","characterSet","ServerHandshake","quitCmd","setImmediate","Quit","rowsAsArray","nestTables","prototype","_startTLS","crypto","credentials","createCredentials","securePair","createSecurePair","encrypted","cleartext","module","exports"],"sources":["/home/emilio/Área de Trabalho/OneBitCode-aulas/REACT/site-react-login-live/react-controlledForms/node_modules/mysql2/lib/connection.js"],"sourcesContent":["// This file was modified by Oracle on June 1, 2021.\n// The changes involve new logic to handle an additional ERR Packet sent by\n// the MySQL server when the connection is closed unexpectedly.\n// Modifications copyright (c) 2021, Oracle and/or its affiliates.\n\n// This file was modified by Oracle on June 17, 2021.\n// The changes involve logic to ensure the socket connection is closed when\n// there is a fatal error.\n// Modifications copyright (c) 2021, Oracle and/or its affiliates.\n\n'use strict';\n\nconst Net = require('net');\nconst Tls = require('tls');\nconst Timers = require('timers');\nconst EventEmitter = require('events').EventEmitter;\nconst Readable = require('stream').Readable;\nconst Queue = require('denque');\nconst SqlString = require('sqlstring');\nconst LRU = require('lru-cache');\n\nconst PacketParser = require('./packet_parser.js');\nconst Packets = require('./packets/index.js');\nconst Commands = require('./commands/index.js');\nconst ConnectionConfig = require('./connection_config.js');\nconst CharsetToEncoding = require('./constants/charset_encodings.js');\n\nlet _connectionId = 0;\n\nlet convertNamedPlaceholders = null;\n\nclass Connection extends EventEmitter {\n  constructor(opts) {\n    super();\n    this.config = opts.config;\n    // TODO: fill defaults\n    // if no params, connect to /var/lib/mysql/mysql.sock ( /tmp/mysql.sock on OSX )\n    // if host is given, connect to host:3306\n    // TODO: use `/usr/local/mysql/bin/mysql_config --socket` output? as default socketPath\n    // if there is no host/port and no socketPath parameters?\n    if (!opts.config.stream) {\n      if (opts.config.socketPath) {\n        this.stream = Net.connect(opts.config.socketPath);\n      } else {\n        this.stream = Net.connect(\n          opts.config.port,\n          opts.config.host\n        );\n\n        // Enable keep-alive on the socket.  It's disabled by default, but the\n        // user can enable it and supply an initial delay.\n        this.stream.setKeepAlive(true, this.config.keepAliveInitialDelay);\n      }\n      // if stream is a function, treat it as \"stream agent / factory\"\n    } else if (typeof opts.config.stream === 'function')  {\n      this.stream = opts.config.stream(opts);\n    } else {\n      this.stream = opts.config.stream;\n    }\n\n    this._internalId = _connectionId++;\n    this._commands = new Queue();\n    this._command = null;\n    this._paused = false;\n    this._paused_packets = new Queue();\n    this._statements = new LRU({\n      max: this.config.maxPreparedStatements,\n      dispose: function(key, statement) {\n        statement.close();\n      }\n    });\n    this.serverCapabilityFlags = 0;\n    this.authorized = false;\n    this.sequenceId = 0;\n    this.compressedSequenceId = 0;\n    this.threadId = null;\n    this._handshakePacket = null;\n    this._fatalError = null;\n    this._protocolError = null;\n    this._outOfOrderPackets = [];\n    this.clientEncoding = CharsetToEncoding[this.config.charsetNumber];\n    this.stream.on('error', this._handleNetworkError.bind(this));\n    // see https://gist.github.com/khoomeister/4985691#use-that-instead-of-bind\n    this.packetParser = new PacketParser(p => {\n      this.handlePacket(p);\n    });\n    this.stream.on('data', data => {\n      if (this.connectTimeout) {\n        Timers.clearTimeout(this.connectTimeout);\n        this.connectTimeout = null;\n      }\n      this.packetParser.execute(data);\n    });\n    this.stream.on('close', () => {\n      // we need to set this flag everywhere where we want connection to close\n      if (this._closing) {\n        return;\n      }\n      if (!this._protocolError) {\n        // no particular error message before disconnect\n        this._protocolError = new Error(\n          'Connection lost: The server closed the connection.'\n        );\n        this._protocolError.fatal = true;\n        this._protocolError.code = 'PROTOCOL_CONNECTION_LOST';\n      }\n      this._notifyError(this._protocolError);\n    });\n    let handshakeCommand;\n    if (!this.config.isServer) {\n      handshakeCommand = new Commands.ClientHandshake(this.config.clientFlags);\n      handshakeCommand.on('end', () => {\n        // this happens when handshake finishes early either because there was\n        // some fatal error or the server sent an error packet instead of\n        // an hello packet (for example, 'Too many connactions' error)\n        if (!handshakeCommand.handshake || this._fatalError || this._protocolError) {\n          return;\n        }\n        this._handshakePacket = handshakeCommand.handshake;\n        this.threadId = handshakeCommand.handshake.connectionId;\n        this.emit('connect', handshakeCommand.handshake);\n      });\n      handshakeCommand.on('error', err => {\n        this._closing = true;\n        this._notifyError(err);\n      });\n      this.addCommand(handshakeCommand);\n    }\n    // in case there was no initiall handshake but we need to read sting, assume it utf-8\n    // most common example: \"Too many connections\" error ( packet is sent immediately on connection attempt, we don't know server encoding yet)\n    // will be overwrittedn with actial encoding value as soon as server handshake packet is received\n    this.serverEncoding = 'utf8';\n    if (this.config.connectTimeout) {\n      const timeoutHandler = this._handleTimeoutError.bind(this);\n      this.connectTimeout = Timers.setTimeout(\n        timeoutHandler,\n        this.config.connectTimeout\n      );\n    }\n  }\n\n  promise(promiseImpl) {\n    const PromiseConnection = require('../promise').PromiseConnection;\n    return new PromiseConnection(this, promiseImpl);\n  }\n\n  _addCommandClosedState(cmd) {\n    const err = new Error(\n      \"Can't add new command when connection is in closed state\"\n    );\n    err.fatal = true;\n    if (cmd.onResult) {\n      cmd.onResult(err);\n    } else {\n      this.emit('error', err);\n    }\n  }\n\n  _handleFatalError(err) {\n    err.fatal = true;\n    // stop receiving packets\n    this.stream.removeAllListeners('data');\n    this.addCommand = this._addCommandClosedState;\n    this.write = () => {\n      this.emit('error', new Error(\"Can't write in closed state\"));\n    };\n    this._notifyError(err);\n    this._fatalError = err;\n  }\n\n  _handleNetworkError(err) {\n    if (this.connectTimeout) {\n      Timers.clearTimeout(this.connectTimeout);\n      this.connectTimeout = null;\n    }\n    // Do not throw an error when a connection ends with a RST,ACK packet\n    if (err.errno === 'ECONNRESET' && this._closing) {\n      return;\n    }\n    this._handleFatalError(err);\n  }\n\n  _handleTimeoutError() {\n    if (this.connectTimeout) {\n      Timers.clearTimeout(this.connectTimeout);\n      this.connectTimeout = null;\n    }\n    this.stream.destroy && this.stream.destroy();\n    const err = new Error('connect ETIMEDOUT');\n    err.errorno = 'ETIMEDOUT';\n    err.code = 'ETIMEDOUT';\n    err.syscall = 'connect';\n    this._handleNetworkError(err);\n  }\n\n  // notify all commands in the queue and bubble error as connection \"error\"\n  // called on stream error or unexpected termination\n  _notifyError(err) {\n    if (this.connectTimeout) {\n      Timers.clearTimeout(this.connectTimeout);\n      this.connectTimeout = null;\n    }\n    // prevent from emitting 'PROTOCOL_CONNECTION_LOST' after EPIPE or ECONNRESET\n    if (this._fatalError) {\n      return;\n    }\n    let command;\n    // if there is no active command, notify connection\n    // if there are commands and all of them have callbacks, pass error via callback\n    let bubbleErrorToConnection = !this._command;\n    if (this._command && this._command.onResult) {\n      this._command.onResult(err);\n      this._command = null;\n      // connection handshake is special because we allow it to be implicit\n      // if error happened during handshake, but there are others commands in queue\n      // then bubble error to other commands and not to connection\n    } else if (\n      !(\n        this._command &&\n        this._command.constructor === Commands.ClientHandshake &&\n        this._commands.length > 0\n      )\n    ) {\n      bubbleErrorToConnection = true;\n    }\n    while ((command = this._commands.shift())) {\n      if (command.onResult) {\n        command.onResult(err);\n      } else {\n        bubbleErrorToConnection = true;\n      }\n    }\n    // notify connection if some comands in the queue did not have callbacks\n    // or if this is pool connection ( so it can be removed from pool )\n    if (bubbleErrorToConnection || this._pool) {\n      this.emit('error', err);\n    }\n    // close connection after emitting the event in case of a fatal error\n    if (err.fatal) {\n      this.close();\n    }\n  }\n\n  write(buffer) {\n    const result = this.stream.write(buffer, err => {\n      if (err) {\n        this._handleNetworkError(err);\n      }\n    });\n\n    if (!result) {\n      this.stream.emit('pause');\n    }\n  }\n\n  // http://dev.mysql.com/doc/internals/en/sequence-id.html\n  //\n  // The sequence-id is incremented with each packet and may wrap around.\n  // It starts at 0 and is reset to 0 when a new command\n  // begins in the Command Phase.\n  // http://dev.mysql.com/doc/internals/en/example-several-mysql-packets.html\n  _resetSequenceId() {\n    this.sequenceId = 0;\n    this.compressedSequenceId = 0;\n  }\n\n  _bumpCompressedSequenceId(numPackets) {\n    this.compressedSequenceId += numPackets;\n    this.compressedSequenceId %= 256;\n  }\n\n  _bumpSequenceId(numPackets) {\n    this.sequenceId += numPackets;\n    this.sequenceId %= 256;\n  }\n\n  writePacket(packet) {\n    const MAX_PACKET_LENGTH = 16777215;\n    const length = packet.length();\n    let chunk, offset, header;\n    if (length < MAX_PACKET_LENGTH) {\n      packet.writeHeader(this.sequenceId);\n      if (this.config.debug) {\n        // eslint-disable-next-line no-console\n        console.log(\n          `${this._internalId} ${this.connectionId} <== ${this._command._commandName}#${this._command.stateName()}(${[this.sequenceId, packet._name, packet.length()].join(',')})`\n        );\n        // eslint-disable-next-line no-console\n        console.log(\n          `${this._internalId} ${this.connectionId} <== ${packet.buffer.toString('hex')}`\n        );\n      }\n      this._bumpSequenceId(1);\n      this.write(packet.buffer);\n    } else {\n      if (this.config.debug) {\n        // eslint-disable-next-line no-console\n        console.log(\n          `${this._internalId} ${this.connectionId} <== Writing large packet, raw content not written:`\n        );\n        // eslint-disable-next-line no-console\n        console.log(\n          `${this._internalId} ${this.connectionId} <== ${this._command._commandName}#${this._command.stateName()}(${[this.sequenceId, packet._name, packet.length()].join(',')})`\n        );\n      }\n      for (offset = 4; offset < 4 + length; offset += MAX_PACKET_LENGTH) {\n        chunk = packet.buffer.slice(offset, offset + MAX_PACKET_LENGTH);\n        if (chunk.length === MAX_PACKET_LENGTH) {\n          header = Buffer.from([0xff, 0xff, 0xff, this.sequenceId]);\n        } else {\n          header = Buffer.from([\n            chunk.length & 0xff,\n            (chunk.length >> 8) & 0xff,\n            (chunk.length >> 16) & 0xff,\n            this.sequenceId\n          ]);\n        }\n        this._bumpSequenceId(1);\n        this.write(header);\n        this.write(chunk);\n      }\n    }\n  }\n\n  // 0.11+ environment\n  startTLS(onSecure) {\n    if (this.config.debug) {\n      // eslint-disable-next-line no-console\n      console.log('Upgrading connection to TLS');\n    }\n    const secureContext = Tls.createSecureContext({\n      ca: this.config.ssl.ca,\n      cert: this.config.ssl.cert,\n      ciphers: this.config.ssl.ciphers,\n      key: this.config.ssl.key,\n      passphrase: this.config.ssl.passphrase,\n      minVersion: this.config.ssl.minVersion\n    });\n    const rejectUnauthorized = this.config.ssl.rejectUnauthorized;\n    let secureEstablished = false;\n    const secureSocket = new Tls.TLSSocket(this.stream, {\n      rejectUnauthorized: rejectUnauthorized,\n      requestCert: true,\n      secureContext: secureContext,\n      isServer: false\n    });\n    // error handler for secure socket\n    secureSocket.on('_tlsError', err => {\n      if (secureEstablished) {\n        this._handleNetworkError(err);\n      } else {\n        onSecure(err);\n      }\n    });\n    secureSocket.on('secure', () => {\n      secureEstablished = true;\n      onSecure(rejectUnauthorized ? secureSocket.ssl.verifyError() : null);\n    });\n    secureSocket.on('data', data => {\n      this.packetParser.execute(data);\n    });\n    this.write = buffer => {\n      secureSocket.write(buffer);\n    };\n    // start TLS communications\n    secureSocket._start();\n  }\n\n  pipe() {\n    if (this.stream instanceof Net.Stream) {\n      this.stream.ondata = (data, start, end) => {\n        this.packetParser.execute(data, start, end);\n      };\n    } else {\n      this.stream.on('data', data => {\n        this.packetParser.execute(\n          data.parent,\n          data.offset,\n          data.offset + data.length\n        );\n      });\n    }\n  }\n\n  protocolError(message, code) {\n    // Starting with MySQL 8.0.24, if the client closes the connection\n    // unexpectedly, the server will send a last ERR Packet, which we can\n    // safely ignore.\n    // https://dev.mysql.com/worklog/task/?id=12999\n    if (this._closing) {\n      return;\n    }\n\n    const err = new Error(message);\n    err.fatal = true;\n    err.code = code || 'PROTOCOL_ERROR';\n    this.emit('error', err);\n  }\n\n  handlePacket(packet) {\n    if (this._paused) {\n      this._paused_packets.push(packet);\n      return;\n    }\n    if (packet) {\n      if (this.sequenceId !== packet.sequenceId) {\n        const err = new Error(\n          `Warning: got packets out of order. Expected ${this.sequenceId} but received ${packet.sequenceId}`\n        );\n        err.expected = this.sequenceId;\n        err.received = packet.sequenceId;\n        this.emit('warn', err); // REVIEW\n        // eslint-disable-next-line no-console\n        console.error(err.message);\n      }\n      this._bumpSequenceId(packet.numPackets);\n    }\n    if (this.config.debug) {\n      if (packet) {\n        // eslint-disable-next-line no-console\n        console.log(\n          ` raw: ${packet.buffer\n            .slice(packet.offset, packet.offset + packet.length())\n            .toString('hex')}`\n        );\n        // eslint-disable-next-line no-console\n        console.trace();\n        const commandName = this._command\n          ? this._command._commandName\n          : '(no command)';\n        const stateName = this._command\n          ? this._command.stateName()\n          : '(no command)';\n        // eslint-disable-next-line no-console\n        console.log(\n          `${this._internalId} ${this.connectionId} ==> ${commandName}#${stateName}(${[packet.sequenceId, packet.type(), packet.length()].join(',')})`\n        );\n      }\n    }\n    if (!this._command) {\n      const marker = packet.peekByte();\n      // If it's an Err Packet, we should use it.\n      if (marker === 0xff) {\n        const error = Packets.Error.fromPacket(packet);\n        this.protocolError(error.message, error.code);\n      } else {\n        // Otherwise, it means it's some other unexpected packet.\n        this.protocolError(\n          'Unexpected packet while no commands in the queue',\n          'PROTOCOL_UNEXPECTED_PACKET'\n        );\n      }\n      this.close();\n      return;\n    }\n    const done = this._command.execute(packet, this);\n    if (done) {\n      this._command = this._commands.shift();\n      if (this._command) {\n        this.sequenceId = 0;\n        this.compressedSequenceId = 0;\n        this.handlePacket();\n      }\n    }\n  }\n\n  addCommand(cmd) {\n    // this.compressedSequenceId = 0;\n    // this.sequenceId = 0;\n    if (this.config.debug) {\n      const commandName = cmd.constructor.name;\n      // eslint-disable-next-line no-console\n      console.log(`Add command: ${commandName}`);\n      cmd._commandName = commandName;\n    }\n    if (!this._command) {\n      this._command = cmd;\n      this.handlePacket();\n    } else {\n      this._commands.push(cmd);\n    }\n    return cmd;\n  }\n\n  format(sql, values) {\n    if (typeof this.config.queryFormat === 'function') {\n      return this.config.queryFormat.call(\n        this,\n        sql,\n        values,\n        this.config.timezone\n      );\n    }\n    const opts = {\n      sql: sql,\n      values: values\n    };\n    this._resolveNamedPlaceholders(opts);\n    return SqlString.format(\n      opts.sql,\n      opts.values,\n      this.config.stringifyObjects,\n      this.config.timezone\n    );\n  }\n\n  escape(value) {\n    return SqlString.escape(value, false, this.config.timezone);\n  }\n\n  escapeId(value) {\n    return SqlString.escapeId(value, false);\n  }\n\n  raw(sql) {\n    return SqlString.raw(sql);\n  }\n\n  _resolveNamedPlaceholders(options) {\n    let unnamed;\n    if (this.config.namedPlaceholders || options.namedPlaceholders) {\n      if (Array.isArray(options.values)) {\n        // if an array is provided as the values, assume the conversion is not necessary.\n        // this allows the usage of unnamed placeholders even if the namedPlaceholders flag is enabled.\n        return\n      }\n      if (convertNamedPlaceholders === null) {\n        convertNamedPlaceholders = require('named-placeholders')();\n      }\n      unnamed = convertNamedPlaceholders(options.sql, options.values);\n      options.sql = unnamed[0];\n      options.values = unnamed[1];\n    }\n  }\n\n  query(sql, values, cb) {\n    let cmdQuery;\n    if (sql.constructor === Commands.Query) {\n      cmdQuery = sql;\n    } else {\n      cmdQuery = Connection.createQuery(sql, values, cb, this.config);\n    }\n    this._resolveNamedPlaceholders(cmdQuery);\n    const rawSql = this.format(cmdQuery.sql, cmdQuery.values !== undefined ? cmdQuery.values : []);\n    cmdQuery.sql = rawSql;\n    return this.addCommand(cmdQuery);\n  }\n\n  pause() {\n    this._paused = true;\n    this.stream.pause();\n  }\n\n  resume() {\n    let packet;\n    this._paused = false;\n    while ((packet = this._paused_packets.shift())) {\n      this.handlePacket(packet);\n      // don't resume if packet hander paused connection\n      if (this._paused) {\n        return;\n      }\n    }\n    this.stream.resume();\n  }\n\n  // TODO: named placeholders support\n  prepare(options, cb) {\n    if (typeof options === 'string') {\n      options = { sql: options };\n    }\n    return this.addCommand(new Commands.Prepare(options, cb));\n  }\n\n  unprepare(sql) {\n    let options = {};\n    if (typeof sql === 'object') {\n      options = sql;\n    } else {\n      options.sql = sql;\n    }\n    const key = Connection.statementKey(options);\n    const stmt = this._statements.get(key);\n    if (stmt) {\n      this._statements.del(key);\n      stmt.close();\n    }\n    return stmt;\n  }\n\n  execute(sql, values, cb) {\n    let options = {};\n    if (typeof sql === 'object') {\n      // execute(options, cb)\n      options = sql;\n      if (typeof values === 'function') {\n        cb = values;\n      } else {\n        options.values = options.values || values;\n      }\n    } else if (typeof values === 'function') {\n      // execute(sql, cb)\n      cb = values;\n      options.sql = sql;\n      options.values = undefined;\n    } else {\n      // execute(sql, values, cb)\n      options.sql = sql;\n      options.values = values;\n    }\n    this._resolveNamedPlaceholders(options);\n    // check for values containing undefined\n    if (options.values) {\n      //If namedPlaceholder is not enabled and object is passed as bind parameters\n      if (!Array.isArray(options.values)) {\n        throw new TypeError(\n          'Bind parameters must be array if namedPlaceholders parameter is not enabled'\n        );\n      }\n      options.values.forEach(val => {\n        //If namedPlaceholder is not enabled and object is passed as bind parameters\n        if (!Array.isArray(options.values)) {\n          throw new TypeError(\n            'Bind parameters must be array if namedPlaceholders parameter is not enabled'\n          );\n        }\n        if (val === undefined) {\n          throw new TypeError(\n            'Bind parameters must not contain undefined. To pass SQL NULL specify JS null'\n          );\n        }\n        if (typeof val === 'function') {\n          throw new TypeError(\n            'Bind parameters must not contain function(s). To pass the body of a function as a string call .toString() first'\n          );\n        }\n      });\n    }\n    const executeCommand = new Commands.Execute(options, cb);\n    const prepareCommand = new Commands.Prepare(options, (err, stmt) => {\n      if (err) {\n        // skip execute command if prepare failed, we have main\n        // combined callback here\n        executeCommand.start = function() {\n          return null;\n        };\n        if (cb) {\n          cb(err);\n        } else {\n          executeCommand.emit('error', err);\n        }\n        executeCommand.emit('end');\n        return;\n      }\n      executeCommand.statement = stmt;\n    });\n    this.addCommand(prepareCommand);\n    this.addCommand(executeCommand);\n    return executeCommand;\n  }\n\n  changeUser(options, callback) {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n    const charsetNumber = options.charset\n      ? ConnectionConfig.getCharsetNumber(options.charset)\n      : this.config.charsetNumber;\n    return this.addCommand(\n      new Commands.ChangeUser(\n        {\n          user: options.user || this.config.user,\n          password: options.password || this.config.password,\n          passwordSha1: options.passwordSha1 || this.config.passwordSha1,\n          database: options.database || this.config.database,\n          timeout: options.timeout,\n          charsetNumber: charsetNumber,\n          currentConfig: this.config\n        },\n        err => {\n          if (err) {\n            err.fatal = true;\n          }\n          if (callback) {\n            callback(err);\n          }\n        }\n      )\n    );\n  }\n\n  // transaction helpers\n  beginTransaction(cb) {\n    return this.query('START TRANSACTION', cb);\n  }\n\n  commit(cb) {\n    return this.query('COMMIT', cb);\n  }\n\n  rollback(cb) {\n    return this.query('ROLLBACK', cb);\n  }\n\n  ping(cb) {\n    return this.addCommand(new Commands.Ping(cb));\n  }\n\n  _registerSlave(opts, cb) {\n    return this.addCommand(new Commands.RegisterSlave(opts, cb));\n  }\n\n  _binlogDump(opts, cb) {\n    return this.addCommand(new Commands.BinlogDump(opts, cb));\n  }\n\n  // currently just alias to close\n  destroy() {\n    this.close();\n  }\n\n  close() {\n    if (this.connectTimeout) {\n      Timers.clearTimeout(this.connectTimeout);\n      this.connectTimeout = null;\n    }\n    this._closing = true;\n    this.stream.end();\n    this.addCommand = this._addCommandClosedState;\n  }\n\n  createBinlogStream(opts) {\n    // TODO: create proper stream class\n    // TODO: use through2\n    let test = 1;\n    const stream = new Readable({ objectMode: true });\n    stream._read = function() {\n      return {\n        data: test++\n      };\n    };\n    this._registerSlave(opts, () => {\n      const dumpCmd = this._binlogDump(opts);\n      dumpCmd.on('event', ev => {\n        stream.push(ev);\n      });\n      dumpCmd.on('eof', () => {\n        stream.push(null);\n        // if non-blocking, then close stream to prevent errors\n        if (opts.flags && opts.flags & 0x01) {\n          this.close();\n        }\n      });\n      // TODO: pipe errors as well\n    });\n    return stream;\n  }\n\n  connect(cb) {\n    if (!cb) {\n      return;\n    }\n    if (this._fatalError || this._protocolError) {\n      return cb(this._fatalError || this._protocolError);\n    }\n    if (this._handshakePacket) {\n      return cb(null, this);\n    }\n    let connectCalled = 0;\n    function callbackOnce(isErrorHandler) {\n      return function(param) {\n        if (!connectCalled) {\n          if (isErrorHandler) {\n            cb(param);\n          } else {\n            cb(null, param);\n          }\n        }\n        connectCalled = 1;\n      };\n    }\n    this.once('error', callbackOnce(true));\n    this.once('connect', callbackOnce(false));\n  }\n\n  // ===================================\n  // outgoing server connection methods\n  // ===================================\n  writeColumns(columns) {\n    this.writePacket(Packets.ResultSetHeader.toPacket(columns.length));\n    columns.forEach(column => {\n      this.writePacket(\n        Packets.ColumnDefinition.toPacket(column, this.serverConfig.encoding)\n      );\n    });\n    this.writeEof();\n  }\n\n  // row is array of columns, not hash\n  writeTextRow(column) {\n    this.writePacket(\n      Packets.TextRow.toPacket(column, this.serverConfig.encoding)\n    );\n  }\n\n  writeTextResult(rows, columns) {\n    this.writeColumns(columns);\n    rows.forEach(row => {\n      const arrayRow = new Array(columns.length);\n      columns.forEach(column => {\n        arrayRow.push(row[column.name]);\n      });\n      this.writeTextRow(arrayRow);\n    });\n    this.writeEof();\n  }\n\n  writeEof(warnings, statusFlags) {\n    this.writePacket(Packets.EOF.toPacket(warnings, statusFlags));\n  }\n\n  writeOk(args) {\n    if (!args) {\n      args = { affectedRows: 0 };\n    }\n    this.writePacket(Packets.OK.toPacket(args, this.serverConfig.encoding));\n  }\n\n  writeError(args) {\n    // if we want to send error before initial hello was sent, use default encoding\n    const encoding = this.serverConfig ? this.serverConfig.encoding : 'cesu8';\n    this.writePacket(Packets.Error.toPacket(args, encoding));\n  }\n\n  serverHandshake(args) {\n    this.serverConfig = args;\n    this.serverConfig.encoding =\n      CharsetToEncoding[this.serverConfig.characterSet];\n    return this.addCommand(new Commands.ServerHandshake(args));\n  }\n\n  // ===============================================================\n  end(callback) {\n    if (this.config.isServer) {\n      this._closing = true;\n      const quitCmd = new EventEmitter();\n      setImmediate(() => {\n        this.stream.end();\n        quitCmd.emit('end');\n      });\n      return quitCmd;\n    }\n    // trigger error if more commands enqueued after end command\n    const quitCmd = this.addCommand(new Commands.Quit(callback));\n    this.addCommand = this._addCommandClosedState;\n    return quitCmd;\n  }\n\n  static createQuery(sql, values, cb, config) {\n    let options = {\n      rowsAsArray: config.rowsAsArray\n    };\n    if (typeof sql === 'object') {\n      // query(options, cb)\n      options = sql;\n      if (typeof values === 'function') {\n        cb = values;\n      } else if (values !== undefined) {\n        options.values = values;\n      }\n    } else if (typeof values === 'function') {\n      // query(sql, cb)\n      cb = values;\n      options.sql = sql;\n      options.values = undefined;\n    } else {\n      // query(sql, values, cb)\n      options.sql = sql;\n      options.values = values;\n    }\n    return new Commands.Query(options, cb);\n  }\n\n  static statementKey(options) {\n    return (\n      `${typeof options.nestTables}/${options.nestTables}/${options.rowsAsArray}${options.sql}`\n    );\n  }\n}\n\nif (Tls.TLSSocket) {\n  // not supported\n} else {\n  Connection.prototype.startTLS = function _startTLS(onSecure) {\n    if (this.config.debug) {\n      // eslint-disable-next-line no-console\n      console.log('Upgrading connection to TLS');\n    }\n    const crypto = require('crypto');\n    const config = this.config;\n    const stream = this.stream;\n    const rejectUnauthorized = this.config.ssl.rejectUnauthorized;\n    const credentials = crypto.createCredentials({\n      key: config.ssl.key,\n      cert: config.ssl.cert,\n      passphrase: config.ssl.passphrase,\n      ca: config.ssl.ca,\n      ciphers: config.ssl.ciphers\n    });\n    const securePair = Tls.createSecurePair(\n      credentials,\n      false,\n      true,\n      rejectUnauthorized\n    );\n\n    if (stream.ondata) {\n      stream.ondata = null;\n    }\n    stream.removeAllListeners('data');\n    stream.pipe(securePair.encrypted);\n    securePair.encrypted.pipe(stream);\n    securePair.cleartext.on('data', data => {\n      this.packetParser.execute(data);\n    });\n    this.write = function(buffer) {\n      securePair.cleartext.write(buffer);\n    };\n    securePair.on('secure', () => {\n      onSecure(rejectUnauthorized ? securePair.ssl.verifyError() : null);\n    });\n  };\n}\n\nmodule.exports = Connection;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}