{"ast":null,"code":"'use strict';\n\nconst Types = require('../constants/types.js');\n\nconst Charsets = require('../constants/charsets.js');\n\nconst helpers = require('../helpers');\n\nconst genFunc = require('generate-function');\n\nconst parserCache = require('./parser_cache.js');\n\nconst typeNames = [];\n\nfor (const t in Types) {\n  typeNames[Types[t]] = t;\n}\n\nfunction readCodeFor(type, charset, encodingExpr, config, options) {\n  const supportBigNumbers = options.supportBigNumbers || config.supportBigNumbers;\n  const bigNumberStrings = options.bigNumberStrings || config.bigNumberStrings;\n  const timezone = options.timezone || config.timezone;\n  const dateStrings = options.dateStrings || config.dateStrings;\n\n  switch (type) {\n    case Types.TINY:\n    case Types.SHORT:\n    case Types.LONG:\n    case Types.INT24:\n    case Types.YEAR:\n      return 'packet.parseLengthCodedIntNoBigCheck()';\n\n    case Types.LONGLONG:\n      if (supportBigNumbers && bigNumberStrings) {\n        return 'packet.parseLengthCodedIntString()';\n      }\n\n      return `packet.parseLengthCodedInt(${supportBigNumbers})`;\n\n    case Types.FLOAT:\n    case Types.DOUBLE:\n      return 'packet.parseLengthCodedFloat()';\n\n    case Types.NULL:\n      return 'packet.readLengthCodedNumber()';\n\n    case Types.DECIMAL:\n    case Types.NEWDECIMAL:\n      if (config.decimalNumbers) {\n        return 'packet.parseLengthCodedFloat()';\n      }\n\n      return 'packet.readLengthCodedString(\"ascii\")';\n\n    case Types.DATE:\n      if (helpers.typeMatch(type, dateStrings, Types)) {\n        return 'packet.readLengthCodedString(\"ascii\")';\n      }\n\n      return `packet.parseDate('${timezone}')`;\n\n    case Types.DATETIME:\n    case Types.TIMESTAMP:\n      if (helpers.typeMatch(type, dateStrings, Types)) {\n        return 'packet.readLengthCodedString(\"ascii\")';\n      }\n\n      return `packet.parseDateTime('${timezone}')`;\n\n    case Types.TIME:\n      return 'packet.readLengthCodedString(\"ascii\")';\n\n    case Types.GEOMETRY:\n      return 'packet.parseGeometryValue()';\n\n    case Types.JSON:\n      // Since for JSON columns mysql always returns charset 63 (BINARY),\n      // we have to handle it according to JSON specs and use \"utf8\",\n      // see https://github.com/sidorares/node-mysql2/issues/409\n      return 'JSON.parse(packet.readLengthCodedString(\"utf8\"))';\n\n    default:\n      if (charset === Charsets.BINARY) {\n        return 'packet.readLengthCodedBuffer()';\n      }\n\n      return `packet.readLengthCodedString(${encodingExpr})`;\n  }\n}\n\nfunction compile(fields, options, config) {\n  // use global typeCast if current query doesn't specify one\n  if (typeof config.typeCast === 'function' && typeof options.typeCast !== 'function') {\n    options.typeCast = config.typeCast;\n  }\n\n  function wrap(field, _this) {\n    return {\n      type: typeNames[field.columnType],\n      length: field.columnLength,\n      db: field.schema,\n      table: field.table,\n      name: field.name,\n      string: function () {\n        return _this.packet.readLengthCodedString(field.encoding);\n      },\n      buffer: function () {\n        return _this.packet.readLengthCodedBuffer();\n      },\n      geometry: function () {\n        return _this.packet.parseGeometryValue();\n      }\n    };\n  }\n\n  const parserFn = genFunc();\n  /* eslint-disable no-trailing-spaces */\n\n  /* eslint-disable no-spaced-func */\n\n  /* eslint-disable no-unexpected-multiline */\n\n  parserFn('(function () {')('return class TextRow {'); // constructor method\n\n  parserFn('constructor(fields) {'); // node-mysql typeCast compatibility wrapper\n  // see https://github.com/mysqljs/mysql/blob/96fdd0566b654436624e2375c7b6604b1f50f825/lib/protocol/packets/Field.js\n\n  if (typeof options.typeCast === 'function') {\n    parserFn('const _this = this;');\n    parserFn('for(let i=0; i<fields.length; ++i) {');\n    parserFn('this[`wrap${i}`] = wrap(fields[i], _this);');\n    parserFn('}');\n  }\n\n  parserFn('}'); // next method\n\n  parserFn('next(packet, fields, options) {');\n  parserFn(\"this.packet = packet;\");\n\n  if (options.rowsAsArray) {\n    parserFn(`const result = new Array(${fields.length});`);\n  } else {\n    parserFn(\"const result = {};\");\n  }\n\n  const resultTables = {};\n  let resultTablesArray = [];\n\n  if (options.nestTables === true) {\n    for (let i = 0; i < fields.length; i++) {\n      resultTables[fields[i].table] = 1;\n    }\n\n    resultTablesArray = Object.keys(resultTables);\n\n    for (let i = 0; i < resultTablesArray.length; i++) {\n      parserFn(`result[${helpers.srcEscape(resultTablesArray[i])}] = {};`);\n    }\n  }\n\n  let lvalue = '';\n  let fieldName = '';\n\n  for (let i = 0; i < fields.length; i++) {\n    fieldName = helpers.srcEscape(fields[i].name);\n    parserFn(`// ${fieldName}: ${typeNames[fields[i].columnType]}`);\n\n    if (typeof options.nestTables === 'string') {\n      lvalue = `result[${helpers.srcEscape(fields[i].table + options.nestTables + fields[i].name)}]`;\n    } else if (options.nestTables === true) {\n      lvalue = `result[${helpers.srcEscape(fields[i].table)}][${fieldName}]`;\n    } else if (options.rowsAsArray) {\n      lvalue = `result[${i.toString(10)}]`;\n    } else {\n      lvalue = `result[${fieldName}]`;\n    }\n\n    if (options.typeCast === false) {\n      parserFn(`${lvalue} = packet.readLengthCodedBuffer();`);\n    } else {\n      const encodingExpr = `fields[${i}].encoding`;\n      const readCode = readCodeFor(fields[i].columnType, fields[i].characterSet, encodingExpr, config, options);\n\n      if (typeof options.typeCast === 'function') {\n        parserFn(`${lvalue} = options.typeCast(this.wrap${i}, function() { return ${readCode} });`);\n      } else {\n        parserFn(`${lvalue} = ${readCode};`);\n      }\n    }\n  }\n\n  parserFn('return result;');\n  parserFn('}');\n  parserFn('};')('})()');\n  /* eslint-enable no-trailing-spaces */\n\n  /* eslint-enable no-spaced-func */\n\n  /* eslint-enable no-unexpected-multiline */\n\n  if (config.debug) {\n    helpers.printDebugWithCode('Compiled text protocol row parser', parserFn.toString());\n  }\n\n  if (typeof options.typeCast === 'function') {\n    return parserFn.toFunction({\n      wrap\n    });\n  }\n\n  return parserFn.toFunction();\n}\n\nfunction getTextParser(fields, options, config) {\n  return parserCache.getParser('text', fields, options, config, compile);\n}\n\nmodule.exports = getTextParser;","map":{"version":3,"names":["Types","require","Charsets","helpers","genFunc","parserCache","typeNames","t","readCodeFor","type","charset","encodingExpr","config","options","supportBigNumbers","bigNumberStrings","timezone","dateStrings","TINY","SHORT","LONG","INT24","YEAR","LONGLONG","FLOAT","DOUBLE","NULL","DECIMAL","NEWDECIMAL","decimalNumbers","DATE","typeMatch","DATETIME","TIMESTAMP","TIME","GEOMETRY","JSON","BINARY","compile","fields","typeCast","wrap","field","_this","columnType","length","columnLength","db","schema","table","name","string","packet","readLengthCodedString","encoding","buffer","readLengthCodedBuffer","geometry","parseGeometryValue","parserFn","rowsAsArray","resultTables","resultTablesArray","nestTables","i","Object","keys","srcEscape","lvalue","fieldName","toString","readCode","characterSet","debug","printDebugWithCode","toFunction","getTextParser","getParser","module","exports"],"sources":["/home/emilio/Área de Trabalho/OneBitCode-aulas/REACT/site-react-login-live/react-controlledForms/node_modules/mysql2/lib/parsers/text_parser.js"],"sourcesContent":["'use strict';\n\nconst Types = require('../constants/types.js');\nconst Charsets = require('../constants/charsets.js');\nconst helpers = require('../helpers');\nconst genFunc = require('generate-function');\nconst parserCache = require('./parser_cache.js');\n\nconst typeNames = [];\nfor (const t in Types) {\n  typeNames[Types[t]] = t;\n}\n\nfunction readCodeFor(type, charset, encodingExpr, config, options) {\n  const supportBigNumbers =\n    options.supportBigNumbers || config.supportBigNumbers;\n  const bigNumberStrings = options.bigNumberStrings || config.bigNumberStrings;\n  const timezone = options.timezone || config.timezone;\n  const dateStrings = options.dateStrings || config.dateStrings;\n\n  switch (type) {\n    case Types.TINY:\n    case Types.SHORT:\n    case Types.LONG:\n    case Types.INT24:\n    case Types.YEAR:\n      return 'packet.parseLengthCodedIntNoBigCheck()';\n    case Types.LONGLONG:\n      if (supportBigNumbers && bigNumberStrings) {\n        return 'packet.parseLengthCodedIntString()';\n      }\n      return `packet.parseLengthCodedInt(${supportBigNumbers})`;\n    case Types.FLOAT:\n    case Types.DOUBLE:\n      return 'packet.parseLengthCodedFloat()';\n    case Types.NULL:\n      return 'packet.readLengthCodedNumber()';\n    case Types.DECIMAL:\n    case Types.NEWDECIMAL:\n      if (config.decimalNumbers) {\n        return 'packet.parseLengthCodedFloat()';\n      }\n      return 'packet.readLengthCodedString(\"ascii\")';\n    case Types.DATE:\n      if (helpers.typeMatch(type, dateStrings, Types)) {\n        return 'packet.readLengthCodedString(\"ascii\")';\n      }\n      return `packet.parseDate('${timezone}')`;\n    case Types.DATETIME:\n    case Types.TIMESTAMP:\n      if (helpers.typeMatch(type, dateStrings, Types)) {\n        return 'packet.readLengthCodedString(\"ascii\")';\n      }\n      return `packet.parseDateTime('${timezone}')`;\n    case Types.TIME:\n      return 'packet.readLengthCodedString(\"ascii\")';\n    case Types.GEOMETRY:\n      return 'packet.parseGeometryValue()';\n    case Types.JSON:\n      // Since for JSON columns mysql always returns charset 63 (BINARY),\n      // we have to handle it according to JSON specs and use \"utf8\",\n      // see https://github.com/sidorares/node-mysql2/issues/409\n      return 'JSON.parse(packet.readLengthCodedString(\"utf8\"))';\n    default:\n      if (charset === Charsets.BINARY) {\n        return 'packet.readLengthCodedBuffer()';\n      }\n      return `packet.readLengthCodedString(${encodingExpr})`;\n  }\n}\n\nfunction compile(fields, options, config) {\n  // use global typeCast if current query doesn't specify one\n  if (\n    typeof config.typeCast === 'function' &&\n    typeof options.typeCast !== 'function'\n  ) {\n    options.typeCast = config.typeCast;\n  }\n\n  function wrap(field, _this) {\n    return {\n      type: typeNames[field.columnType],\n      length: field.columnLength,\n      db: field.schema,\n      table: field.table,\n      name: field.name,\n      string: function() {\n        return _this.packet.readLengthCodedString(field.encoding);\n      },\n      buffer: function() {\n        return _this.packet.readLengthCodedBuffer();\n      },\n      geometry: function() {\n        return _this.packet.parseGeometryValue();\n      }\n    };\n  }\n\n  const parserFn = genFunc();\n\n  /* eslint-disable no-trailing-spaces */\n  /* eslint-disable no-spaced-func */\n  /* eslint-disable no-unexpected-multiline */\n  parserFn('(function () {')(\n    'return class TextRow {'\n  );\n\n  // constructor method\n  parserFn('constructor(fields) {');\n  // node-mysql typeCast compatibility wrapper\n  // see https://github.com/mysqljs/mysql/blob/96fdd0566b654436624e2375c7b6604b1f50f825/lib/protocol/packets/Field.js\n  if (typeof options.typeCast === 'function') {\n    parserFn('const _this = this;');\n    parserFn('for(let i=0; i<fields.length; ++i) {');\n    parserFn('this[`wrap${i}`] = wrap(fields[i], _this);');\n    parserFn('}');\n  }\n  parserFn('}');\n\n  // next method\n  parserFn('next(packet, fields, options) {');\n  parserFn(\"this.packet = packet;\");\n  if (options.rowsAsArray) {\n    parserFn(`const result = new Array(${fields.length});`);\n  } else {\n    parserFn(\"const result = {};\");\n  }\n\n  const resultTables = {};\n  let resultTablesArray = [];\n\n  if (options.nestTables === true) {\n    for (let i=0; i < fields.length; i++) {\n      resultTables[fields[i].table] = 1;\n    }\n    resultTablesArray = Object.keys(resultTables);\n    for (let i=0; i < resultTablesArray.length; i++) {\n      parserFn(`result[${helpers.srcEscape(resultTablesArray[i])}] = {};`);\n    }\n  }\n\n  let lvalue = '';\n  let fieldName = '';\n  for (let i = 0; i < fields.length; i++) {\n    fieldName = helpers.srcEscape(fields[i].name);\n    parserFn(`// ${fieldName}: ${typeNames[fields[i].columnType]}`);\n    if (typeof options.nestTables === 'string') {\n      lvalue = `result[${helpers.srcEscape(\n        fields[i].table + options.nestTables + fields[i].name\n      )}]`;\n    } else if (options.nestTables === true) {\n      lvalue = `result[${helpers.srcEscape(fields[i].table)}][${fieldName}]`;\n    } else if (options.rowsAsArray) {\n      lvalue = `result[${i.toString(10)}]`;\n    } else {\n      lvalue = `result[${fieldName}]`;\n    }\n    if (options.typeCast === false) {\n      parserFn(`${lvalue} = packet.readLengthCodedBuffer();`);\n    } else {\n      const encodingExpr = `fields[${i}].encoding`;\n      const readCode = readCodeFor(\n        fields[i].columnType,\n        fields[i].characterSet,\n        encodingExpr,\n        config,\n        options\n      );\n      if (typeof options.typeCast === 'function') {\n        parserFn(`${lvalue} = options.typeCast(this.wrap${i}, function() { return ${readCode} });`);\n      }  else {\n        parserFn(`${lvalue} = ${readCode};`);\n      }\n    }  \n  }\n\n  parserFn('return result;');\n  parserFn('}');\n  parserFn('};')('})()');\n\n  /* eslint-enable no-trailing-spaces */\n  /* eslint-enable no-spaced-func */\n  /* eslint-enable no-unexpected-multiline */\n\n  if (config.debug) {\n    helpers.printDebugWithCode(\n      'Compiled text protocol row parser',\n      parserFn.toString()\n    );\n  }\n  if (typeof options.typeCast === 'function') {\n    return parserFn.toFunction({wrap});\n  } \n  return parserFn.toFunction();\n}\n\nfunction getTextParser(fields, options, config) {\n  return parserCache.getParser('text', fields, options, config, compile);\n}\n\nmodule.exports = getTextParser;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}