{"ast":null,"code":"'use strict';\n\nconst CursorType = require('../constants/cursor');\n\nconst CommandCodes = require('../constants/commands');\n\nconst Types = require('../constants/types');\n\nconst Packet = require('../packets/packet');\n\nconst CharsetToEncoding = require('../constants/charset_encodings.js');\n\nfunction isJSON(value) {\n  return Array.isArray(value) || value.constructor === Object || typeof value.toJSON === 'function' && !Buffer.isBuffer(value);\n}\n/**\n * Converts a value to an object describing type, String/Buffer representation and length\n * @param {*} value\n */\n\n\nfunction toParameter(value, encoding, timezone) {\n  let type = Types.VAR_STRING;\n  let length;\n\n  let writer = function (value) {\n    // eslint-disable-next-line no-invalid-this\n    return Packet.prototype.writeLengthCodedString.call(this, value, encoding);\n  };\n\n  if (value !== null) {\n    switch (typeof value) {\n      case 'undefined':\n        throw new TypeError('Bind parameters must not contain undefined');\n\n      case 'number':\n        type = Types.DOUBLE;\n        length = 8;\n        writer = Packet.prototype.writeDouble;\n        break;\n\n      case 'boolean':\n        value = value | 0;\n        type = Types.TINY;\n        length = 1;\n        writer = Packet.prototype.writeInt8;\n        break;\n\n      case 'object':\n        if (Object.prototype.toString.call(value) === '[object Date]') {\n          type = Types.DATETIME;\n          length = 12;\n\n          writer = function (value) {\n            // eslint-disable-next-line no-invalid-this\n            return Packet.prototype.writeDate.call(this, value, timezone);\n          };\n        } else if (isJSON(value)) {\n          value = JSON.stringify(value);\n          type = Types.JSON;\n        } else if (Buffer.isBuffer(value)) {\n          length = Packet.lengthCodedNumberLength(value.length) + value.length;\n          writer = Packet.prototype.writeLengthCodedBuffer;\n        }\n\n        break;\n\n      default:\n        value = value.toString();\n    }\n  } else {\n    value = '';\n    type = Types.NULL;\n  }\n\n  if (!length) {\n    length = Packet.lengthCodedStringLength(value, encoding);\n  }\n\n  return {\n    value,\n    type,\n    length,\n    writer\n  };\n}\n\nclass Execute {\n  constructor(id, parameters, charsetNumber, timezone) {\n    this.id = id;\n    this.parameters = parameters;\n    this.encoding = CharsetToEncoding[charsetNumber];\n    this.timezone = timezone;\n  }\n\n  toPacket() {\n    // TODO: don't try to calculate packet length in advance, allocate some big buffer in advance (header + 256 bytes?)\n    // and copy + reallocate if not enough\n    // 0 + 4 - length, seqId\n    // 4 + 1 - COM_EXECUTE\n    // 5 + 4 - stmtId\n    // 9 + 1 - flags\n    // 10 + 4 - iteration-count (always 1)\n    let length = 14;\n    let parameters;\n\n    if (this.parameters && this.parameters.length > 0) {\n      length += Math.floor((this.parameters.length + 7) / 8);\n      length += 1; // new-params-bound-flag\n\n      length += 2 * this.parameters.length; // type byte for each parameter if new-params-bound-flag is set\n\n      parameters = this.parameters.map(value => toParameter(value, this.encoding, this.timezone));\n      length += parameters.reduce((accumulator, parameter) => accumulator + parameter.length, 0);\n    }\n\n    const buffer = Buffer.allocUnsafe(length);\n    const packet = new Packet(0, buffer, 0, length);\n    packet.offset = 4;\n    packet.writeInt8(CommandCodes.STMT_EXECUTE);\n    packet.writeInt32(this.id);\n    packet.writeInt8(CursorType.NO_CURSOR); // flags\n\n    packet.writeInt32(1); // iteration-count, always 1\n\n    if (parameters) {\n      let bitmap = 0;\n      let bitValue = 1;\n      parameters.forEach(parameter => {\n        if (parameter.type === Types.NULL) {\n          bitmap += bitValue;\n        }\n\n        bitValue *= 2;\n\n        if (bitValue === 256) {\n          packet.writeInt8(bitmap);\n          bitmap = 0;\n          bitValue = 1;\n        }\n      });\n\n      if (bitValue !== 1) {\n        packet.writeInt8(bitmap);\n      } // TODO: explain meaning of the flag\n      // afaik, if set n*2 bytes with type of parameter are sent before parameters\n      // if not, previous execution types are used (TODO prooflink)\n\n\n      packet.writeInt8(1); // new-params-bound-flag\n      // Write parameter types\n\n      parameters.forEach(parameter => {\n        packet.writeInt8(parameter.type); // field type\n\n        packet.writeInt8(0); // parameter flag\n      }); // Write parameter values\n\n      parameters.forEach(parameter => {\n        if (parameter.type !== Types.NULL) {\n          parameter.writer.call(packet, parameter.value);\n        }\n      });\n    }\n\n    return packet;\n  }\n\n}\n\nmodule.exports = Execute;","map":{"version":3,"names":["CursorType","require","CommandCodes","Types","Packet","CharsetToEncoding","isJSON","value","Array","isArray","constructor","Object","toJSON","Buffer","isBuffer","toParameter","encoding","timezone","type","VAR_STRING","length","writer","prototype","writeLengthCodedString","call","TypeError","DOUBLE","writeDouble","TINY","writeInt8","toString","DATETIME","writeDate","JSON","stringify","lengthCodedNumberLength","writeLengthCodedBuffer","NULL","lengthCodedStringLength","Execute","id","parameters","charsetNumber","toPacket","Math","floor","map","reduce","accumulator","parameter","buffer","allocUnsafe","packet","offset","STMT_EXECUTE","writeInt32","NO_CURSOR","bitmap","bitValue","forEach","module","exports"],"sources":["/home/emilio/Área de Trabalho/OneBitCode-aulas/REACT/site-react-login-live/react-controlledForms/node_modules/mysql2/lib/packets/execute.js"],"sourcesContent":["'use strict';\n\nconst CursorType = require('../constants/cursor');\nconst CommandCodes = require('../constants/commands');\nconst Types = require('../constants/types');\nconst Packet = require('../packets/packet');\nconst CharsetToEncoding = require('../constants/charset_encodings.js');\n\nfunction isJSON(value) {\n  return (\n    Array.isArray(value) ||\n    value.constructor === Object ||\n    (typeof value.toJSON === 'function' && !Buffer.isBuffer(value))\n  );\n}\n\n/**\n * Converts a value to an object describing type, String/Buffer representation and length\n * @param {*} value\n */\nfunction toParameter(value, encoding, timezone) {\n  let type = Types.VAR_STRING;\n  let length;\n  let writer = function(value) {\n    // eslint-disable-next-line no-invalid-this\n    return Packet.prototype.writeLengthCodedString.call(this, value, encoding);\n  };\n  if (value !== null) {\n    switch (typeof value) {\n      case 'undefined':\n        throw new TypeError('Bind parameters must not contain undefined');\n\n      case 'number':\n        type = Types.DOUBLE;\n        length = 8;\n        writer = Packet.prototype.writeDouble;\n        break;\n\n      case 'boolean':\n        value = value | 0;\n        type = Types.TINY;\n        length = 1;\n        writer = Packet.prototype.writeInt8;\n        break;\n\n      case 'object':\n        if (Object.prototype.toString.call(value) === '[object Date]') {\n          type = Types.DATETIME;\n          length = 12;\n          writer = function(value) {\n            // eslint-disable-next-line no-invalid-this\n            return Packet.prototype.writeDate.call(this, value, timezone);\n          };\n        } else if (isJSON(value)) {\n          value = JSON.stringify(value);\n          type = Types.JSON;\n        } else if (Buffer.isBuffer(value)) {\n          length = Packet.lengthCodedNumberLength(value.length) + value.length;\n          writer = Packet.prototype.writeLengthCodedBuffer;\n        }\n        break;\n\n      default:\n        value = value.toString();\n    }\n  } else {\n    value = '';\n    type = Types.NULL;\n  }\n  if (!length) {\n    length = Packet.lengthCodedStringLength(value, encoding);\n  }\n  return { value, type, length, writer };\n}\n\nclass Execute {\n  constructor(id, parameters, charsetNumber, timezone) {\n    this.id = id;\n    this.parameters = parameters;\n    this.encoding = CharsetToEncoding[charsetNumber];\n    this.timezone = timezone;\n  }\n\n  toPacket() {\n    // TODO: don't try to calculate packet length in advance, allocate some big buffer in advance (header + 256 bytes?)\n    // and copy + reallocate if not enough\n    // 0 + 4 - length, seqId\n    // 4 + 1 - COM_EXECUTE\n    // 5 + 4 - stmtId\n    // 9 + 1 - flags\n    // 10 + 4 - iteration-count (always 1)\n    let length = 14;\n    let parameters;\n    if (this.parameters && this.parameters.length > 0) {\n      length += Math.floor((this.parameters.length + 7) / 8);\n      length += 1; // new-params-bound-flag\n      length += 2 * this.parameters.length; // type byte for each parameter if new-params-bound-flag is set\n      parameters = this.parameters.map(value =>\n        toParameter(value, this.encoding, this.timezone)\n      );\n      length += parameters.reduce(\n        (accumulator, parameter) => accumulator + parameter.length,\n        0\n      );\n    }\n    const buffer = Buffer.allocUnsafe(length);\n    const packet = new Packet(0, buffer, 0, length);\n    packet.offset = 4;\n    packet.writeInt8(CommandCodes.STMT_EXECUTE);\n    packet.writeInt32(this.id);\n    packet.writeInt8(CursorType.NO_CURSOR); // flags\n    packet.writeInt32(1); // iteration-count, always 1\n    if (parameters) {\n      let bitmap = 0;\n      let bitValue = 1;\n      parameters.forEach(parameter => {\n        if (parameter.type === Types.NULL) {\n          bitmap += bitValue;\n        }\n        bitValue *= 2;\n        if (bitValue === 256) {\n          packet.writeInt8(bitmap);\n          bitmap = 0;\n          bitValue = 1;\n        }\n      });\n      if (bitValue !== 1) {\n        packet.writeInt8(bitmap);\n      }\n      // TODO: explain meaning of the flag\n      // afaik, if set n*2 bytes with type of parameter are sent before parameters\n      // if not, previous execution types are used (TODO prooflink)\n      packet.writeInt8(1); // new-params-bound-flag\n      // Write parameter types\n      parameters.forEach(parameter => {\n        packet.writeInt8(parameter.type); // field type\n        packet.writeInt8(0); // parameter flag\n      });\n      // Write parameter values\n      parameters.forEach(parameter => {\n        if (parameter.type !== Types.NULL) {\n          parameter.writer.call(packet, parameter.value);\n        }\n      });\n    }\n    return packet;\n  }\n}\n\nmodule.exports = Execute;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}